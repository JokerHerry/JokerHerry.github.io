<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[MVP的简单实现]]></title>
      <url>/2017/11/28/MVP%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>一个好的好的设计模式可以帮我们很好的管理我们的代码，也会方便于我们的后期的扩展。特别是针对我们这样的新手，学好一个好的代码管理是很有必要的。所以今天，和大家一起学习一下MVP模式。</p>
<h1 id="一、MVP设计模式概述"><a href="#一、MVP设计模式概述" class="headerlink" title="一、MVP设计模式概述"></a>一、MVP设计模式概述</h1><h4 id="什么是MVP设计模式"><a href="#什么是MVP设计模式" class="headerlink" title="什么是MVP设计模式"></a>什么是MVP设计模式</h4><p>MVP，分别是Model-View-Presenter,即模型-视图-提出者。<br>Model：模型，实现业务逻辑和实例生成。<br>View：视图，对应的界面布局，以及界面布局的方法。<br>Presenter：一个活动中，主要的业务交互，作为view和model的中间传达者。</p>
<h4 id="什么是MVC设计模式"><a href="#什么是MVC设计模式" class="headerlink" title="什么是MVC设计模式"></a>什么是MVC设计模式</h4><p>MVP，分别是Model-View-Presenter,即模型-视图-控制器。<br>Model：模型，实现业务逻辑和实例生成。<br>View：视图，对应的界面布局，以及界面布局的方法。<br>Controllor：作为页面的控制器，响应view的交互，对应于Android中的Activity</p>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>这么说可能不是很清晰，我们用两张图片来描述一下。<br><img src="http://upload-images.jianshu.io/upload_images/9221897-e7698e3d35552cb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MVP与MVC对比"></p>
<p>但是在Android我们的可以知道，其实Avtivity不仅要处理view的呈现，还要负责处理页面的业务逻辑，显得Activity不仅像view，又像controllor的结合体，导致Acitivity整体臃肿，超过1000行都是常事。</p>
<p>所以，为了更好的解耦这样的情况，让Activity更好的只关心页面的呈现，将主要的业务交互放置在presenter中实现，让Presenter作为view与model的中间传递者。减少Activity的体积。降低耦合度。</p>
<p>在MVP模式中，我们要做到，view层和model不能直接通信，要想通信，必须通过Persenter这一中间件。并且，view，model，presenter都是接口，之间的通讯也都是通过接口实现的。</p>
<h1 id="二、-MVP的简单实现"><a href="#二、-MVP的简单实现" class="headerlink" title="二、 MVP的简单实现"></a>二、 MVP的简单实现</h1><p>接下来我们通过一个基础的实例，让我们来实现一个简单的MVP模式的登录界面。从实例的角度，我们来分析一个具体的MVP模式。看看他是怎样实现解耦，以及明显的内容划分。</p>
<h4 id="Model层："><a href="#Model层：" class="headerlink" title="Model层："></a>Model层：</h4><p>model层是用来实现某一层里面的业务逻辑。<br>那么，在一个登录界面中，我的model层就是实现登录密码检验的功能。<br>首先，我们需要有一个对象类，来表达我们需要检验的对象。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    private String name;</div><div class="line">    private String password;</div><div class="line"></div><div class="line">    public User(String name,String password)&#123;</div><div class="line">        this.name = name;</div><div class="line">        this.password = password;</div><div class="line">    &#125;</div><div class="line">	...省略getter和setter</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们需要一个LoginModel的接口函数，来申明我们的登录所需要的函数。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface LoginModel &#123;</div><div class="line">    void login(User user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次是model的实现类，实现我们刚才在LoginModel中申明的login函数。<br>这里我们延时2秒钟，用于模拟登陆效果。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class LoginModelImpl implements LoginModel&#123;</div><div class="line">    @Override</div><div class="line">    public void login(User user) &#123;</div><div class="line">        final String name = user.getName();</div><div class="line">        final String password = user.getPassword();</div><div class="line"></div><div class="line">        new Handler().postDelayed(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Boolean error =false;</div><div class="line">                if (TextUtils.isEmpty(name))&#123;</div><div class="line">                    error = true;</div><div class="line">                    //输入错误</div><div class="line">                    System.out.println("输入错误");</div><div class="line">                &#125;</div><div class="line">                if (TextUtils.isEmpty(password))&#123;</div><div class="line">                    error = true;</div><div class="line">                    //输入错误</div><div class="line">                    System.out.println("输入错误");</div><div class="line">                &#125;</div><div class="line">                if(!error)&#123;</div><div class="line">                    //登录成功</div><div class="line">                    System.out.println("登录成功");</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,2000);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="View层："><a href="#View层：" class="headerlink" title="View层："></a>View层：</h4><p>对应的界面布局，以及界面布局的方法。<br>这里我们需要实现的waitDialog的显示与消失，以及登录成功和失败的提醒，所以建立我们的view接口类，LoginView.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public interface LoginView &#123;</div><div class="line">    void loginSuccess();</div><div class="line">    void ErrorPass();</div><div class="line">    void ErrorEnter();</div><div class="line"></div><div class="line">    void showDialog();</div><div class="line">    void hideDialog();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们的实例就是Activity，使Acitivity继承我们的接口，实现我们接口中的方法。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">	//申明persenter实例</div><div class="line">    LoginPresenter presenter;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_login);</div><div class="line">        ButterKnife.bind(this);</div><div class="line"></div><div class="line">        btn.setOnClickListener(this);</div><div class="line">		//通过Presenter实例类申明presenter</div><div class="line">        presenter = new LoginPresenterImpl(this);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void loginSuccess() &#123;</div><div class="line">        Toast.makeText(this,"登录成功",Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void ErrorPass() &#123;</div><div class="line">        Toast.makeText(this,"密码错误",Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void ErrorEnter() &#123;</div><div class="line">        Toast.makeText(this,"输入错误",Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void showDialog() &#123;</div><div class="line">        loginProgress.setVisibility(View.VISIBLE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void hideDialog() &#123;</div><div class="line">        loginProgress.setVisibility(View.GONE);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	@Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        User user = new User(name.getText().toString(), password.getText().toString());</div><div class="line">		//将检验事件回调给presenter，让他通知model进行检验</div><div class="line">        presenter.checkLogin(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Presenter层："><a href="#Presenter层：" class="headerlink" title="Presenter层："></a>Presenter层：</h4><p>接下来是重点了，我们的Presenter类。<br>传递<br>作为view和model的中间传达者。view告诉presenter需要检验了，然后presenter在告诉model，并把得到的user值给model，让model进行检验。<br>申明presenter的接口类。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface LoginPresenter &#123;</div><div class="line">    void checkLogin(User user);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接口实现类LoginPresenterImpl,我们在presenter的实例中，获取到view和model的实例，然后在里面对其进行信息传递。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class LoginPresenterImpl implements LoginPresenter,LoginModelListener&#123;</div><div class="line">    LoginView view;</div><div class="line">    LoginModel model;</div><div class="line"></div><div class="line">    public LoginPresenterImpl(LoginView loginView)&#123;</div><div class="line">		//从Activity中获取到对view的引用</div><div class="line">        this.view = loginView;</div><div class="line">		//申明一个新的model</div><div class="line">        model = new LoginModelImpl();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void checkLogin(User user) &#123;</div><div class="line">		//保证视图是存在的</div><div class="line">        if (view == null)&#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">		//显示view中的dialog，然后对user信息进行验证</div><div class="line">        view.showDialog();</div><div class="line">        model.login(user,this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样我们就实现了将view的事件，通过presenter传递给了model层，让他去处理这一次的检验事件，但是大家有没有发现，我们是将这个事件传递给了model，但是model在处理完了之后，他又怎么将得到的结果通知给presenter呢？因为我们要避免view和model直接接触。所以在这里，我们还需要一个listenter的接口类，让presenter继承这个接口，在传递给model的时候，携带接口一起传过去。然后model通过这个接口告诉presenter，presenter再去通知view。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface LoginModelListener &#123;</div><div class="line">    void loginSuccess();</div><div class="line">    void loginError();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface LoginModel &#123;</div><div class="line">    void login(User user, LoginModelListener listener);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class LoginModelImpl implements LoginModel&#123;</div><div class="line">    @Override</div><div class="line">    public void login(User user, final LoginModelListener listener) &#123;</div><div class="line">        final String name = user.getName();</div><div class="line">        final String password = user.getPassword();</div><div class="line"></div><div class="line">        new Handler().postDelayed(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Boolean error =false;</div><div class="line">                if (TextUtils.isEmpty(name))&#123;</div><div class="line">                    error = true;</div><div class="line">                    //输入错误</div><div class="line">                    System.out.println("输入错误");</div><div class="line">                    listener.loginError();</div><div class="line">                &#125;</div><div class="line">                if (TextUtils.isEmpty(password))&#123;</div><div class="line">                    error = true;</div><div class="line">                    //输入错误</div><div class="line">                    System.out.println("输入错误");</div><div class="line">                    listener.loginError();</div><div class="line">                &#125;</div><div class="line">                if(!error)&#123;</div><div class="line">                    //登录成功</div><div class="line">                    System.out.println("登录成功");</div><div class="line">                    listener.loginSuccess();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,2000);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，我们就实现了一个简单的MVP的demo，是不是觉得Acitivity里面的逻辑很简单了，看着一下字就轻松了很多。</p>
<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>那么我们现在结合刚才的案例。我们再来总结一下。</p>
<p>因为我们要保证view和model直接不能直接通信，所有之间的交互，我们都要通过presenter这一个中间类来进行传递。persenter中拥有view和model的引用，然后，view中有事件产生时，将事件以及需要的参数传给presenter，presenter再交给model，待model处理完了之后，将反馈信息传给presenter，presenter再将返回结果告诉view，最后呈现给用户。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/9221897-ee5cf07453250e9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程图"></p>
<p><a href="https://github.com/JokerHerry/MVP-demo" target="_blank" rel="external">github代码</a></p>
]]></content>
      
        <categories>
            
            <category> android学习之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android四大组件之活动]]></title>
      <url>/2017/10/31/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8B%E6%B4%BB%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h1 id="活动是什么"><a href="#活动是什么" class="headerlink" title="活动是什么"></a>活动是什么</h1><p>活动就是Activity，Android的四大组件之一。用户看到的界面，以及用户与界面的交互，都是通过活动（Activity）来完成的。<br>所以可以把活动理解为一个与用户交互的界面。</p>
<h1 id="活动基本用法"><a href="#活动基本用法" class="headerlink" title="活动基本用法"></a>活动基本用法</h1><p>要启动一个活动，那就肯定需要使用到Intent。在使用Intent的基础上，有两种启动方式。</p>
<h2 id="显式启动"><a href="#显式启动" class="headerlink" title="显式启动"></a>显式启动</h2><p>找准你需要启动的活动，然后实现intent就可以直接启动。<br>Intent intent = new Intent(this.class,ActivityTow.class);<br>startActivity(intent);</p>
<h2 id="隐式启动"><a href="#隐式启动" class="headerlink" title="隐式启动"></a>隐式启动</h2><p>采用一种含蓄的方式，在intent中并不说明你需要启动的是那一个活动，而是让系统自己去找。<br>因为很少用到，这里就不说了。</p>
<h2 id="活动中传递数据"><a href="#活动中传递数据" class="headerlink" title="活动中传递数据"></a>活动中传递数据</h2><p>在使用Intent启动活动的时候，我们可以通过的intent的putExtra方法向下一个活动传递参数。<br>intent.putExtra(name,value);<br>通过键值对的方式，传递参数。<br>新开的活动可以通过getIntent().getStringExtra()等一些重载的函数，获取传递过来的参数。<br>String bili = getIntent().getStringExtra(“bili”);</p>
<h1 id="活动的生命周期"><a href="#活动的生命周期" class="headerlink" title="活动的生命周期"></a>活动的生命周期</h1><p>“咚咚咚，敲黑板，重点来了。”<br><img src="/2017/10/31/Android四大组件之活动/生命周期.png" alt="生命周期" title="生命周期"><br>生命周期一共有7个回掉函数，表示整个活动从生成到死亡，以及中间的暂停状态中，一共经历了那些生命函数。<br>一个普通的生命周期为：<br>onCreate()-&gt;onStart()-&gt;onResume()-&gt;onPause()-&gt;onStop()-&gt;onDestory()<br>一共6个部分，还有一个onRestart()在活动暂停后又被唤醒的时候，调用。</p>
<h2 id="下面是对每个生命周期函数详细说明："><a href="#下面是对每个生命周期函数详细说明：" class="headerlink" title="下面是对每个生命周期函数详细说明："></a>下面是对每个生命周期函数详细说明：</h2><ol>
<li><p><strong>onCreate()</strong>：在一个活动初次创建的时候调用，作为启动活动的第一个回调函数，我们一般在其中进行申明绑定UI控件，以及一些数据的初始化的操作。</p>
</li>
<li><p><strong>onStart()</strong>：表示现在这个活动已经创建成功了，现在正在启动。是一个活动从不可见到可见的一个过度过程，所以Activity已经存在了，但就还是看不见的状态。</p>
</li>
<li><p><strong>onResume()</strong>：字面意思，“将其唤醒”，表示现在Activity已经是可见的了。与onStart对比的话，可以认为onStart的时候，Activity还是在后台，当到达onResume的时候，新的Activity已经到前台了。</p>
</li>
<li><p><strong>onPause()</strong>：表示该Activity正在停止，现在Activity仍然是可见的。常用来做一些保存关键数据的操作，onPause中不能进行耗时间的操作，会影响到后面的Activity出现的时间。onPause必须执行完了，新的活动的Activity的OnResume才能执行。</p>
</li>
<li><p><strong>onStop()</strong>：表示现在该活动已经看不见，表示Activity已经停止，可以做一些轻量级回收工作。与onPause的区别，onPause是还看得见的，onStop是已经看不见了，所以，如果只是以一个对话框启动，或者一个dialog启动，onPause会执行，而onStop不会执行。</p>
</li>
<li><p><strong>onDetory()</strong>：再该活动销毁前调用，表示该活动马上就要消失了，进行一些资源的回收工作。</p>
</li>
<li><p><strong>onRestart()</strong>：重新启动一个活动，当一个活动为不可见状态变到重新可见的情况下进行。接下来是onStart()，即重新可见函数。</p>
</li>
</ol>
<h2 id="生命周期常见情况："><a href="#生命周期常见情况：" class="headerlink" title="生命周期常见情况："></a>生命周期常见情况：</h2><p>活动第一次启动：onCreate-&gt;onStart-&gt;onResume;<br>新开了一个活动，然后返回上一个活动：onPause-&gt;onStop-&gt;onRestart-&gt;onStart-&gt;onResume<br>按下home键：onPause-&gt;onStop;<br>home键后重新回来：onRestart-&gt;onStart-&gt;onResume;<br>finish方法后：onRestart-&gt;onStart-&gt;Destroy;</p>
<h2 id="生命周期特殊情况："><a href="#生命周期特殊情况：" class="headerlink" title="生命周期特殊情况："></a>生命周期特殊情况：</h2><p>资源不足，导致优先级较低的Activity被杀死<br>横竖屏切换<br>还有一个onSaveInstanceState()函数，保证在活动结束前，一定能调用，用于储存重要数据。</p>
<h1 id="活动的启动模式"><a href="#活动的启动模式" class="headerlink" title="活动的启动模式"></a>活动的启动模式</h1><h2 id="启动模式类别"><a href="#启动模式类别" class="headerlink" title="启动模式类别"></a>启动模式类别</h2><p>Android提供的4种Activity的启动模式</p>
<ul>
<li>standard（标准模式） </li>
<li>singleTop（栈顶复用模式） </li>
<li>singleTask（站内复用模式）</li>
<li>singleInstance（单例模式）</li>
</ul>
<p>在AndroidMainfest.xml中，通过给activity标签指定android:launchMode属性来选择启动模式。</p>
<h2 id="启动模式结构"><a href="#启动模式结构" class="headerlink" title="启动模式结构"></a>启动模式结构</h2><p>Activity的管理采用栈的数据结构的方式。先进后出。<br><img src="/2017/10/31/Android四大组件之活动/Activity_task.png" alt="栈" title="栈"></p>
<h2 id="4中启动方式"><a href="#4中启动方式" class="headerlink" title="4中启动方式"></a>4中启动方式</h2><h3 id="standard"><a href="#standard" class="headerlink" title="standard:"></a>standard:</h3><p>标准启动模式，每次启动一个Activity压入栈顶。谁启动的Activity，这个Activity就运行在那个Activity所在的栈中。<br>如果一个Activity中，启动自己本身这个Activity，也会生成一个新的该活动实例。<br><img src="/2017/10/31/Android四大组件之活动/standard.png" alt="standard" title="standard"><br>如果在Application和service中启动Activity，因为其没有所谓的栈，使用flag标识。<br>如：FLAG_ACTIVITY_NEW_TASK标记，创建一个新的栈。</p>
<h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop:"></a>singleTop:</h3><p>栈顶复用模式，如果新建的Activity就是自己本身的话，就会重新加载该Activity，不会创建新的实例。<br><img src="/2017/10/31/Android四大组件之活动/singleTop.png" alt="singleTop" title="singleTop"></p>
<h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask:"></a>singleTask:</h3><p>栈内复用模式，是一种单例模式，即栈内有且只有一个该Activity的实例。<br>可以在AndroidMainfest.xml中在对activity配置的时候，通过teskAffinity申明需要加载在那一个栈中。<br>如果指定的栈中，新创建的Activity不存在，则新创建一个，并压入栈中。如果存在，就把该Activity之上的活动全部杀死，直到该Activity置于栈顶。<br><img src="/2017/10/31/Android四大组件之活动/singleTask1.png" alt="singleTask1" title="singleTask1"><br><img src="/2017/10/31/Android四大组件之活动/singleTask2.png" alt="singleTask2" title="singleTask2"><br><img src="/2017/10/31/Android四大组件之活动/singleTask3.png" alt="singleTask3" title="singleTask3"></p>
<h3 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance:"></a>singleInstance:</h3><p>单例模式，每一个Activity都在一个新的栈中</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-创建型模式-单例模式]]></title>
      <url>/2017/10/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>单例模式<br>定义：<br>单例模式确保该类只能有一个创建的实例，保证全局的唯一性，可以直接被访问，但是不能被创建。<br><a id="more"></a><br>特点:</p>
<ul>
<li>只有一个实例，唯一性</li>
<li>单例类不提供创建方法，只能自己创建唯一的实例</li>
<li>提供公开的方法，向所有对象提供这一个实例</li>
</ul>
<p>通用理解：<br>创建：<br>public class SingleObj{<br>    //创建 自己 对象<br>    private static SingleObj instance = new SingleObj();<br>    //构造函数为private,所以只能自己实例化<br>    private SingleObj(){}<br>    //公开实例的唯一对象<br>    public static SingleObj getInstance(){<br>        return instance;<br>    }<br>    public void showMessage(){<br>        System.out.println(“hello world!”);<br>    }<br>}</p>
<p>使用：<br>//错误方法<br>//因为构造函数是不可见的<br>//SingleObj object = SingleObj.getInstance();</p>
<p>//正确获取方法<br>SingleObj object = SingleObject.getInstance();</p>
<p>//显示消息<br>object.showMessage();</p>
<p>常用6种单例模式：</p>
<ol>
<li>懒汉式，线程不安全<br>既然是懒汉，所以在不调用他之前，绝不创建自己对象，只有使用他的时候，才会创建对象。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class SingleTon&#123;</div><div class="line">    private static SingleTon instance;</div><div class="line">    private SingleTon()&#123;&#125;;</div><div class="line">    </div><div class="line">    public static SingleTon getInstance()&#123;</div><div class="line">        if(instance == null)&#123;</div><div class="line">            instance = new SingleTon();</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>简单，方便。但是有一个致命的缺点，就是在多线程的情况之下，当多个线程同时调用getInstance的时候，很可能创建出多个实例。所以在多线程的情况之下，不能成为一个单例模式。</p>
<ol>
<li>懒汉式，线程安全<br>既然懒汉式在多线程不安全，那么我们只需要给他加一个锁，保证单线运行就行了撒。所以我们直接给getInstance添加同步关键字(synchronized)；<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class SingleTon&#123;</div><div class="line">    private static SingleTon instance;</div><div class="line">    private SingleTon()&#123;&#125;;</div><div class="line">    </div><div class="line">    public static synchronized SingleTon getInstance()&#123;</div><div class="line">        if(instance == null)&#123;</div><div class="line">            instance = new SingleTon();</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>保留了懒汉式的简单、方便还有懒汉模式，而且有保证的线程安全。但因为加了锁，导致效率下降，因为同一时间，只能有一个线程运行getInstance()；</p>
<ol>
<li>饿汉式<br>既然是饿汉，所以还不择食。与其担心多线程时创建多个实例，不如首先实例好，需要的时候，提供给你就好了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class SingleTon&#123;</div><div class="line">    private static SingleTon instance = new SingleTon();</div><div class="line">    private SingleTon()&#123;&#125;;</div><div class="line">    public static SingleTon getInstance()&#123;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>简单方便，解决了多线程的问题，没有加锁，提到了运行效率。<br>缺点：<br>类加载时候就已经初始化了，内存的浪费。<br>如果创建该实例的时候，需要依赖其他信息或者参数的时候，就做不到。</p>
<ol>
<li>双重检验锁<br>思路来源于懒汉式，既然给getInstance加锁导致效率下降，那么我们在创建的时候加锁呢？<br>即两次检验单例是否已经存在。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class SingleTon&#123;</div><div class="line">    private static SingleTon instance;</div><div class="line">    private SingleTon()&#123;&#125;;</div><div class="line">    </div><div class="line">    public static synchronized SingleTon getInstance()&#123;</div><div class="line">        if(instance == null)&#123;</div><div class="line">            synchronized (Singleton.class) &#123;</div><div class="line">                if (instance == null) &#123;             </div><div class="line">                    instance = new Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这段代码看起来很完美，很可惜，它是有问题。主要在于instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情:</p>
<p>1.给 instance 分配内存</p>
<p>2.调用 Singleton 的构造函数来初始化成员变量</p>
<p>3.将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）。</p>
<p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</p>
<p>复杂，且存在隐含问题。</p>
<ol>
<li>静态内部类<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class SingleTon&#123;</div><div class="line">    private static class SingleTonHolder&#123;</div><div class="line">        private static final SingleTon instance = new SingleTon();</div><div class="line">    &#125;</div><div class="line">    private SingleTon()&#123;&#125;</div><div class="line">    public static final SingleTon getInstance()&#123;</div><div class="line">        return SingleTonHolder.instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用了JVM本身机制保证了线程的安全，<br>因为静态单例对象并不是成员变量，所以在加载类的时候，不会实例化。<br>第一次调用getInstance的时候，加载内部类SingleTonHolder。实现实例化<br>既是懒汉，又有Java虚拟机保证线程安全。</p>
<ol>
<li>Enum枚举<br>神技，简单，粗暴。而且各种天生buff。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum EasySingleTon&#123;</div><div class="line">    INSTANCE:</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。</p>
<p>总结<br>总结来说，一共有5中，第一种不算。懒汉，饿汉，双重检验，静态内部类，枚举。</p>
<p>通常情况之下，常用饿汉解决问题。<br>如果要求懒加载，那就用静态内部类。<br>如果涉及反序列化，那就使用枚举。</p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 创建型模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sqlite基本操作]]></title>
      <url>/2017/10/21/sqlite%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>对数据库操作的一个梳理。<br><a id="more"></a></p>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><blockquote>
<p>.database    查看当前的数据库文件</p>
</blockquote>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><blockquote>
<p>sqlite3 testDB.db</p>
</blockquote>
<h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><blockquote>
<p>.table    查看当前数据库文件的表</p>
<p>.schema [表名]    查看数据库中某一个表的定义</p>
</blockquote>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><blockquote>
<p>create table <a href="[列名] [类型] [约束条件],
  [列名] [类型] [约束条件]">表名</a>;</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">create table student(</div><div class="line">	id int not null primary key),</div><div class="line">	name varchar(20) not null,</div><div class="line">	age int not null,</div><div class="line">	address varchar(20) not null</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><blockquote>
<p>drop table [表名];</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop table student;</div></pre></td></tr></table></figure></p>
<h2 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h2><blockquote>
<p>truncate table [表名];</p>
<p>truncate table student;</p>
</blockquote>
<h1 id="对表中数据的增删查改"><a href="#对表中数据的增删查改" class="headerlink" title="对表中数据的增删查改"></a>对表中数据的增删查改</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><blockquote>
<p>insert into [表名] ([字段名1],[字段名2]…)<br>    values ([常量1],[常量2]…);<br>insert into [表名] ([字段名1],[字段名2]…)<br>    select [查询语句<br>];</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">insert into student (id,name,age,address)</div><div class="line">	values (1,&quot;hzq&quot;,22,&quot;china&quot;);</div><div class="line">insert into student (id,name,age,address)</div><div class="line">	select (id,name,age,address) from student_T;</div></pre></td></tr></table></figure></p>
<h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><blockquote>
<p>delete from [table] [where表达式]</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//删除ID为1的学生信息</div><div class="line">delete from student where id=1;</div></pre></td></tr></table></figure></p>
<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><blockquote>
<p>select [ALL|DISTINCT] [目标列1…]<br>from [表名]<br>    [where表达式]<br>    [order by 表达式]<br>    [limit 表达式];</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//显示来自中国的id最大的前4位</div><div class="line">select name from student</div><div class="line">	where address=&quot;china&quot;</div><div class="line">	order by id DESC</div><div class="line">	limit 4;</div></pre></td></tr></table></figure></p>
<h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><blockquote>
<p>update [表名] set [列名]=[需要修改成为的值，或者表达式]     [where表达式];</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update student set age=18 where id=1;</div></pre></td></tr></table></figure></p>
<h1 id="约束条件："><a href="#约束条件：" class="headerlink" title="约束条件："></a>约束条件：</h1><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><blockquote>
<p>指定条件。<br>同时可以通过关系运算符和逻辑运算符”&gt;,&lt;,=,like,not”</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//查询student表中，id=1的结果；</div><div class="line">select * from student where id=1;</div><div class="line">//查询student表中，id大于10小于100的结果。</div><div class="line">select * from student where id&gt;10 and id &lt; 100;</div></pre></td></tr></table></figure></p>
<h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><blockquote>
<p>按照一定的顺序显示结果。支持升序和降序。<br>order by [列名] ASC;     //升序<br>order by [列名] DESC;    //降序</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//查询所有的学生，并按照降序排序</div><div class="line">select * from student order by id DESC;</div></pre></td></tr></table></figure></p>
<h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h2><blockquote>
<p>限制输出结果的数量。</p>
<p>limit [int] [offset [int]];</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//查询student表，从第2(1+1)个数据开始，只显示3个。</div><div class="line">select * from student limit 3 offset 1;</div><div class="line">注意：数据库中的表的下标，是从0开始。</div></pre></td></tr></table></figure></p>
<h2 id="like："><a href="#like：" class="headerlink" title="like："></a>like：</h2><blockquote>
<p>通过通配符来匹配达标的项。</p>
<p>可以使用的通配符有两个：</p>
<ul>
<li>百分号：% </li>
<li>下划线：_</li>
</ul>
<p>%表示零个或者多个字符，_表示一个数字或字符。</p>
</blockquote>
<p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">where salary like &quot;200%&quot;    找到200开头的结果</div><div class="line">where salary like &quot;%200%&quot;   找到含有200的结果</div><div class="line">where salary like &quot;_00%&quot;    找到第二位和第三位都是0的结果</div><div class="line">where salary like &quot;2_%_%&quot;   找到以2开头，并且长度至少有3位的结果</div><div class="line">where salary like &quot;2%3&quot;     找到2开头，3结尾的结果</div></pre></td></tr></table></figure></p>
<h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h2><blockquote>
<p>与select一起使用，用来查找出不重复的结果。</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//看学生都是来自哪几个地方</div><div class="line">select distinct address from student</div></pre></td></tr></table></figure></p>
<h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><blockquote>
<p>与select连用，将相同的数据进行分组。</p>
<p>注意：group by要放在where之后，order by之前。</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//显示出每个学生的名字，以及他的总分</div><div class="line">select name,SUM(grade) from student group by name;</div></pre></td></tr></table></figure></p>
<h2 id="having"><a href="#having" class="headerlink" title="having"></a>having</h2><blockquote>
<p>指定过滤条件，  与group by连用。</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//输出age次数出现了两次以上的结果</div><div class="line">select name,age from student group by age having COUNT(age)&gt;=2;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> sql语句 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android消息处理机制]]></title>
      <url>/2017/10/20/android%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="消息机制的理解"><a href="#消息机制的理解" class="headerlink" title="消息机制的理解"></a>消息机制的理解</h1><p>说到消息处理，我们首先想到的就是Hanlder，他也就是我们常说的Android异步消息处理机制。使用它，我们可以很轻易的在主线程和子线程之间进行切换。所以，也常用来更新UI。（因为UI只能在主线程里面进行更改）<br><a id="more"></a></p>
<h1 id="hanlder的常用方法"><a href="#hanlder的常用方法" class="headerlink" title="hanlder的常用方法"></a>hanlder的常用方法</h1><pre><code class="bash">Thread MyThread = new Thread(new <span class="function"><span class="title">Runnable</span></span>() {
    @Override
    public void <span class="function"><span class="title">run</span></span>() {
        //耗时间的操作
        ...
        Message msg = new Message();
        msg.what = 1;
        handler.sendMessage(msg);
    }
}).start();

public Handler handler = new <span class="function"><span class="title">Handler</span></span>(){
    @Override
    public void handleMessage(Message msg) {
        super.handleMessage(msg);
        //更新UI的操作
        ...
    }
};
</code></pre>
<p>我们可以在子线程中，进行耗时间的操作，等完成的时候，我们可以在界面中予以体现出来。<br>常用到的，也就是handler和Message，其实内部还有一些东西。下面我们就一起了解一下。</p>
<h1 id="消息机制的模型"><a href="#消息机制的模型" class="headerlink" title="消息机制的模型"></a>消息机制的模型</h1><p>消息处理的4个部分：Message，Handler，MessageQueue，Looper</p>
<h2 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h2><p>就是信息的载体。线程之间的消息传递，少量信息，用于不同的线程之间的交换数据。就是信息的载体。可以传递的信息有int(what arg1 arg2) Object (obj)</p>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>事件的发出者和处理者，是消息机制的辅助处理类。发出信息：sendMessage()   处理信息：handleMessage()</p>
<h2 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h2><p>是一个单链表的数据结构，不是队列，实行先进先出原则，主要用于存放所有通过Handler.sendemessage发送的消息。即向消息池投递消息(MessageQueue.enqueueMessage)和取走消息池的消息(MessageQueue.next)。会一直存在消息队列中，等待被处理。每个线程只有一个MessageQueue对象。</p>
<h2 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h2><p>MessageQueue的管家。不断循环(Looper.loop)，从中取出信息到handleMessage（）中，即将消息交给处理者Handler处理。</p>
<h1 id="消息处理机制结构"><a href="#消息处理机制结构" class="headerlink" title="消息处理机制结构"></a>消息处理机制结构</h1><img src="/2017/10/20/android消息处理机制/1.png" alt="消息机制运行结构图" title="消息机制运行结构图">
<p>图片来源于 <a href="https://github.com/LRH1993/android_interview/blob/master/android/basis.md&quot;" target="_blank" rel="external">Android事件分发机制</a></p>
]]></content>
      
        <categories>
            
            <category> android学习之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android四大组件之服务]]></title>
      <url>/2017/10/16/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8B%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>Android四大组件一，相当于一个看不见的Acticity，虽然多线程也是看不见的，也是在后台默默运行的，但是服务server和多线程Thread完全不一样！！！servere还是运行在主线程中，所以在service不要运行耗时的操作，会直接报错！<br><a id="more"></a></p>
<p>所以，先总结一下service的特点，然后再来挨着验证：<br>1、运行在主线程，不宜进行耗时操作；<br>2、相当于一个隐形的Activity；<br>3、运行的即使是运行的进程死掉，服务也不一定会死掉；</p>
<h1 id="接下来看一下如何使用"><a href="#接下来看一下如何使用" class="headerlink" title="接下来看一下如何使用"></a>接下来看一下如何使用</h1><h2 id="1、构建服务-service"><a href="#1、构建服务-service" class="headerlink" title="1、构建服务 service"></a>1、构建服务 service</h2><p>类似与四大组件的通用创建方式。直接新建，选择service，然后Exported表示其他App也可以访问这个服务，然后Enable表示开启这个服务，即可。AS会自动在xml中创建标签。</p>
<p>新的service要求重写onBind()函数，用户返回连接的Bind,后面会用到。</p>
<p>我们一般会手动重写一下onCreate(),onStartCommand(),onDestory()这三个函数。用于处理service需要做的事情。</p>
<h2 id="2、启动服务-service"><a href="#2、启动服务-service" class="headerlink" title="2、启动服务 service"></a>2、启动服务 service</h2><p>在Activity中，我们有两种方法启动service。<br>一种是直接启动，然后就不管了（当然也管不了），任由服务自身自灭，就算是服务完成了工作，Activity也不知道，完全互补干涩。相当于散养。<br>一种是在启动的时候，保留一个连接，通过这个连接可以随时监控service的状态，以及控制service。（圈养）</p>
<h3 id="1-散养（startService）"><a href="#1-散养（startService）" class="headerlink" title="(1)散养（startService）"></a>(1)散养（startService）</h3><p>在Activity中，使用：<br>//开启<br>Intent i = new Intent(this,MyService.class);<br>startService(i);<br>//关闭<br>Intent i = new Intent(this,MyService.class);<br>stopService(i);</p>
<p>就像启动一个最简单的Activity，但是这种方法只能单纯的启动一个service，service启动之后就会自动干活，做完没有，以及什么时候做完的，Activity都是不知道。在调用stopService就会停止该服务。但我发现这样启动service之后，就算你直接将App finish之后，service还是没有Destory。</p>
<h3 id="2-圈养（bindService）"><a href="#2-圈养（bindService）" class="headerlink" title="(2)圈养（bindService）"></a>(2)圈养（bindService）</h3><p>在Myservice中，写一个内部类，继承Binder，里面的方法自己写，暴露给Activity，用于控制service。然后申明一个MyBind的变量，在onBind函数中，将其返回出去。<br>在Activity中，深明一个ServiceConnection()，重写两个内部的方法，分别是连接成功时，和断开连接时调用，在onServiceConnection中，获取MyBinder对象。然后使用bindService(intent,ServiceConnection,…),进行绑定开启服务。这种方式可以多个Activity控制同一个Sevice，当最后一个与Service连接的Activity断开的时候，Service才会销毁。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在明白了如何开启我们的服务之后，我们再来关心一下service的生命周期，以及service与Activity的联系。</p>
<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>1.如果同时使用了startService和bindService，怎样才能停止才服务？<br>2.两个Activity同时绑定了一个Service，当在一个Activity中使用了unbingService，服务会停止吗？<br>3.怎样使一个活动（进程）已经死亡了之后，保证服务会不停止，继续运行？</p>
<p>新建工程。工程目录结构如下<br><img src="/2017/10/16/Android四大组件之服务/1.png" alt="目录结构" title="目录结构"><br>我们一共需要两个Activity和一个service。</p>
<p>service文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class MyService extends Service &#123;</div><div class="line">    private static final String TAG = <span class="string">"MyService"</span>;</div><div class="line">    private MyBinder mybinder;</div><div class="line">    public <span class="function"><span class="title">MyService</span></span>() &#123;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        <span class="built_in">return</span> mybinder;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onCreate</span></span>() &#123;</div><div class="line">        Log.e(TAG, <span class="string">"onCreate: "</span> );</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</div><div class="line">        Log.e(TAG, <span class="string">"onStartCommand: "</span> );</div><div class="line">        <span class="built_in">return</span> super.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        Log.e(TAG, <span class="string">"onDestroy: "</span> );</div><div class="line">    &#125;</div><div class="line">    class MyBinder extends Binder&#123;</div><div class="line">        public void <span class="function"><span class="title">func1</span></span>()&#123;</div><div class="line">            Log.e(TAG, <span class="string">"func1: "</span>);</div><div class="line">        &#125;</div><div class="line">        public void <span class="function"><span class="title">func2</span></span>()&#123;</div><div class="line">            Log.e(TAG, <span class="string">"func2: "</span> );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重写了onCreate，onStartCommand，onDestroy，onBind方法。新建了一个MyBinder内部类，用于绑定后，对Service的操作。</p>
<p>Activity1的布局文件以及java文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:gravity=<span class="string">"center_horizontal"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span></div><div class="line">    android:paddingBottom=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    android:paddingLeft=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    android:paddingRight=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    android:paddingTop=<span class="string">"@dimen/activity_vertical_margin"</span>&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/startService"</span></div><div class="line">        android:text=<span class="string">"startService"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/stopService"</span></div><div class="line">        android:text=<span class="string">"stopService"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/bindService"</span></div><div class="line">        android:text=<span class="string">"bindService"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/unbindService"</span></div><div class="line">        android:text=<span class="string">"unbindService"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/changeActivity"</span></div><div class="line">        android:text=<span class="string">"changeActivity"</span>/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>java:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity  &#123;</div><div class="line">    private MyService.MyBinder binder ;</div><div class="line">    private static final String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button startButton = (Button) findViewById(R.id.startService);</div><div class="line">        Button stopButton = (Button) findViewById(R.id.stopService);</div><div class="line">        Button bindButton = (Button) findViewById(R.id.bindService);</div><div class="line">        final Button unbindButton = (Button) findViewById(R.id.unbindService);</div><div class="line">        Button changeActivity = (Button) findViewById(R.id.changeActivity);</div><div class="line"></div><div class="line">        final ServiceConnection connection = new <span class="function"><span class="title">ServiceConnection</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onServiceConnected(ComponentName componentName, IBinder iBinder) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"onServiceConnected: "</span> );</div><div class="line">                binder = (MyService.MyBinder) iBinder;</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onServiceDisconnected(ComponentName componentName) &#123;</div><div class="line">                binder.func1();</div><div class="line">                binder.func2();</div><div class="line">                Log.e(TAG, <span class="string">"onServiceDisconnected: "</span> );</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        startButton.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Intent intent = new Intent(MainActivity.this,MyService.class);</div><div class="line">                startService(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        stopButton.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Intent intent = new Intent(MainActivity.this,MyService.class);</div><div class="line">                stopService(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        bindButton.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Intent intent = new Intent(MainActivity.this,MyService.class);</div><div class="line">                bindService(intent,connection, Context.BIND_AUTO_CREATE);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        unbindButton.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                unbindService(connection);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        changeActivity.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Intent intent = new Intent(MainActivity.this,MainActivity2.class);</div><div class="line">                startActivity(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        Log.e(TAG, <span class="string">"onDestroy: "</span> );</div><div class="line">        super.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Activity2的布局文件以及java文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/M2_bindService"</span></div><div class="line">        android:text=<span class="string">"M2_bindService"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/M2_unbindService"</span></div><div class="line">        android:text=<span class="string">"M2_unbindService"</span>/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>java:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class MainActivity2 extends AppCompatActivity &#123;</div><div class="line">    private static final String TAG = <span class="string">"MainActivity2"</span>;</div><div class="line">    MyService.MyBinder binder;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main2);</div><div class="line"></div><div class="line">        final Button <span class="built_in">bind</span> = (Button) findViewById(R.id.M2_bindService);</div><div class="line">        final Button unbind = (Button) findViewById(R.id.M2_unbindService);</div><div class="line"></div><div class="line">        final ServiceConnection connection = new <span class="function"><span class="title">ServiceConnection</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onServiceConnected(ComponentName componentName, IBinder iBinder) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"onServiceConnected: "</span> );</div><div class="line">                binder = (MyService.MyBinder) iBinder;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onServiceDisconnected(ComponentName componentName) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"onServiceDisconnected: "</span> );</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        bind.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Intent intent = new Intent(MainActivity2.this,MyService.class);</div><div class="line">                bindService(intent,connection,BIND_AUTO_CREATE);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        unbind.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                unbindService(connection);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/2017/10/16/Android四大组件之服务/2.png" alt="button顺序1" title="button顺序1">
<img src="/2017/10/16/Android四大组件之服务/3.png" alt="button顺序2" title="button顺序2">
<p>测试1：同时使用startService和bindService<br>点击顺序：1324和1342<br>输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">E/MyService: onCreate: </div><div class="line">E/MyService: onStartCommand: </div><div class="line">E/MyService: onDestroy:</div></pre></td></tr></table></figure></p>
<p>结论：如果同时使用startService和bindService，则需要同时使用stopService和unbindService才能结束掉服务。</p>
<p>测试2：两个Activity同时绑定了一个Service<br>点击顺序：356784<br>输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyService: onCreate: </div><div class="line">MyService: onDestroy:</div></pre></td></tr></table></figure></p>
<p>结论：当两个Activity同时绑定了一个Service时，一个断开，只要还有一个Activity还与Service相连，那么就不会Service就不会死掉。<br>有趣的是，如果我们点击顺序为：3568 和38<br>输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">E/MyService: onCreate: </div><div class="line">E/MainActivity: onDestroy: </div><div class="line">E/ActivityThread: Error....</div><div class="line">E/MyService: onDestroy:</div></pre></td></tr></table></figure></p>
<p>那么程度会报错，而且程序中，Activity的Destroy在服务的Destroy之前就已经结束了，导致了报错。</p>
<p>测试3：怎样使一个活动（进程）已经死亡了之后，保证服务会不停止<br>点击顺序：18 然后重新开启该应用， 2<br>输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">E/MyService: onCreate: </div><div class="line">E/MyService: onStartCommand: </div><div class="line">E/MainActivity: onDestroy: </div><div class="line">E/MyService: onDestroy:</div></pre></td></tr></table></figure></p>
<p>可以看到，在程序已经onDestroy了之后，服务并没有断掉，所以说，使用startService的方式启动的服务，已经与本Activity无关了。在Activity已经死掉的情况之下，还是能继续运行。</p>
]]></content>
      
        <categories>
            
            <category> android学习之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android-cardView的使用]]></title>
      <url>/2017/09/14/android-cardView/</url>
      <content type="html"><![CDATA[<p>首先，我们要知道cardView是android在5.0之后推出的一个界面组件，官方文档里面对什么时候用它，以及在什么情况之下使用他才能达到较好的效果，都有详细的介绍的哈，不过由于是英文，看起来还是有一点吃力哈。cardView本身是继承于FrameLayout，说明他其实也是一种布局文件，所以暂时可以理解为一种自带展示效果的一种FrameLayout布局文件。<br><a href="https://material.io/guidelines/components/cards.html" target="_blank" rel="external">官方原文文档</a><br><a href="https://github.com/1sters/material_design_zh" target="_blank" rel="external">中文文档</a><br><a id="more"></a></p>
<h1 id="导入库文件"><a href="#导入库文件" class="headerlink" title="导入库文件"></a>导入库文件</h1><p>在gradle中进行配置</p>
<pre><code class="bash">dependencies {
    ...
    compile <span class="string">'com.android.support:cardview-v7:26.+'</span>
}
</code></pre>
<p>其实android有很多自带的组件，而且界面效果都非常好。在我们的android sdk的文件夹之下，<br>Android\sdk\extras\android\m2repository\com\android\support<br>里面有很多的组件，没事的时候可以挨个研究一下。<br>这里我们根据的自己的版本填写自己对应的版本号就行了。</p>
<h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1><p>打开CardView的源文件我们可以很清晰的找到caraView所拥有的属性以及方法。<br>这里我就直接找了一些。<br>app:cardBackgroundColor这是设置背景颜色<br>app:cardCornerRadius这是设置圆角大小<br>app:cardElevation这是设置z轴的阴影<br>app:cardMaxElevation这是设置z轴的最大高度值<br>app:cardUseCompatPadding是否使用CompatPadding<br>app:cardPreventCornerOverlap是否使用PreventCornerOverlap<br>app:contentPadding 设置内容的padding<br>app:contentPaddingLeft 设置内容的左padding<br>app:contentPaddingTop 设置内容的上padding<br>app:contentPaddingRight 设置内容的右padding<br>app:contentPaddingBottom 设置内容的底padding</p>
<p>最简单的基础版</p>
<pre><code class="bash">&lt;android.support.v7.widget.CardView
    android:layout_margin=<span class="string">"20dp"</span>
    android:layout_width=<span class="string">"match_parent"</span>
    android:layout_height=<span class="string">"200dp"</span>&gt;
&lt;/android.support.v7.widget.CardView&gt;
</code></pre>
<p>只是引用，什么都没加，效果就很low，就是一个有边框的FrameLayout的样子。<br><img src="/2017/09/14/android-cardView/one.png" alt="cardView基础版" title="cardView基础版"><br>让我们稍作调整，让他好看一点。</p>
<p>成熟期版</p>
<pre><code class="bash">&lt;android.support.v7.widget.CardView
    android:layout_margin=<span class="string">"20dp"</span>            
    android:layout_width=<span class="string">"match_parent"</span>
    android:layout_height=<span class="string">"300dp"</span>

    app:cardCornerRadius=<span class="string">"20dp"</span>                //加上圆角
    app:cardElevation=<span class="string">"10dp"</span>                //加上阴影
    app:cardBackgroundColor=<span class="string">"#dcdcdc"</span>        //加上背景颜色
    &gt;
    &lt;ImageView
        android:layout_width=<span class="string">"match_parent"</span>
        android:layout_height=<span class="string">"wrap_content"</span>
        android:scaleType=<span class="string">"center"</span>
        android:src=<span class="string">"@drawable/pic"</span>
        tools:ignore=<span class="string">"ContentDescription"</span> /&gt;        
&lt;/android.support.v7.widget.CardView&gt;
</code></pre>
<p>这一次我们新增加了一些属性，让其变得更像卡片一些。<br><img src="/2017/09/14/android-cardView/two.png" alt="cardView成熟期" title="cardView成熟期"><br>有没有觉得现在看起来要好看一些了呢！</p>
<p>最后我们仿照着官方文档中的那个图片做一个类似的。<br><img src="/2017/09/14/android-cardView/three.png" alt="cardView官方图片" title="cardView官方图片"><br><img src="/2017/09/14/android-cardView/four.png" alt="cardView仿照制作" title="cardView仿照制作"></p>
<p>看起来效果还不错是吧。</p>
<p>源文件已经上传，有兴趣的朋友可以看一下。<br><a href="https://github.com/JokerHerry/donghua" target="_blank" rel="external">链接在此</a></p>
]]></content>
      
        <categories>
            
            <category> android学习之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> materialDesign </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java基本理解，以及常用小技巧]]></title>
      <url>/2017/07/31/java1/</url>
      <content type="html"><![CDATA[<h1 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a>基本理解</h1><h2 id="jdk与jre的关系"><a href="#jdk与jre的关系" class="headerlink" title="jdk与jre的关系"></a>jdk与jre的关系</h2><a id="more"></a>
<p>因为每次在官网上下载的jdk的安装包的时候，安装时就会发现，我们不仅安装我们所需要的jdk，而且我们还安装了一个jre，于是不禁有点好奇。经过网上查阅，总结了一下：</p>
<p>jre(java runtime environment)  java运行环境<br>jdk(Java Development Kit)  java开发者工具<br>jvm(Java Virtual Machine)  java虚拟机<br><img src="/2017/07/31/java1/1.jpg" alt="层次结构" title="层次结构"></p>
<h3 id="理清关系"><a href="#理清关系" class="headerlink" title="理清关系"></a>理清关系</h3><p>我们现在一般下载的jkd中都已经包含了jre，所以一般在安装jdk的时候会自动提醒安装jre。<br>jre与jdk是相互独立的两个东西。<br>JRE（java运行时环境）包含JVM的java程序的运行环境。<br>因为java需要首先将java程序编译成为javac的中间件，但是机器并不认识这种编译，只有通过jvm处理，同时也保证了跨平台编译，而现在jvm一般也都集成在了jre之中。</p>
<h3 id="JDK（Java-Development-Kit）"><a href="#JDK（Java-Development-Kit）" class="headerlink" title="JDK（Java Development Kit）"></a>JDK（Java Development Kit）</h3><p>JDK是Java开发工具包，是Sun Microsystems针对Java开发员的产品。<br>JDK中包含JRE，在JDK的安装目录下有一个名为jre的目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。<br>JDK是整个JAVA的核心，包括了Java运行环境JRE（Java Runtime Envirnment）、一堆Java工具（javac/java/jdb等）和Java基础的类库（即Java API 包括rt.jar）。</p>
<h3 id="Java-Runtime-Environment（JRE）"><a href="#Java-Runtime-Environment（JRE）" class="headerlink" title="Java Runtime Environment（JRE）"></a>Java Runtime Environment（JRE）</h3><p>是运行基于Java语言编写的程序所不可缺少的运行环境。也是通过它，Java的开发者才得以将自己开发的程序发布到用户手中，让用户使用。<br>JRE中包含了Java virtual machine（JVM），runtime class libraries和Java application launcher，这些是运行Java程序的必要组件。<br>与大家熟知的JDK不同，JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器），只是针对于使用Java程序的用户。</p>
<h3 id="JVM（java-virtual-machine）"><a href="#JVM（java-virtual-machine）" class="headerlink" title="JVM（java virtual machine）"></a>JVM（java virtual machine）</h3><p>就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行。<br>也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。<br>只有JVM还不能成class的执行，因为在解释class的时候JVM需要调用解释所需要的类库lib，而jre包含lib类库。<br>JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p>
<h1 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h1><h2 id="查看自己的java是32位的，还是64位"><a href="#查看自己的java是32位的，还是64位" class="headerlink" title="查看自己的java是32位的，还是64位"></a>查看自己的java是32位的，还是64位</h2><p>方法一：</p>
<pre><code class="bash">在cmd使用指令：        java -version
</code></pre>
<p>可以看到自己的java版本，如果是64位的话，会直接在最下方显示64Bit，32位的话就不会显示，我的就是32位的。<br><img src="/2017/07/31/java1/2.png" alt="2.png" title=""></p>
<p>方法二：使用定向指令</p>
<pre><code class="bash">在cmd使用指令：        java d32-version
在cmd使用指令：        java d64-version
</code></pre>
<p>这样就可以看到自己的装的32位java与64位java分别各是多少版本。<br><img src="/2017/07/31/java1/3.png" alt="3.png" title=""></p>
]]></content>
      
        <categories>
            
            <category> java理解 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[github项目学习：Context-Menu.Android]]></title>
      <url>/2017/07/17/android2/</url>
      <content type="html"><![CDATA[<p>看图看效果，Context-Menu.Android在github上是一个比较火的项目，而且实现效果也也比较简单，仅需几部就可以实现一个优雅的动态菜单。这一部分讲解一下怎么在androidStudio怎么实现。<br><img src="/2017/07/17/android2/1.gif" alt="Context-Menu.Android效果展示" title="Context-Menu.Android效果展示"><br><a id="more"></a></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>先奉上github的链接。<a href="https://github.com/Yalantis/Context-Menu.Android" target="_blank" rel="external">戳戳戳</a></p>
<p>复制组件的代码到自己项目的gradle中，然后点击同步。【注意。是自己的app的gradle中，不是工程名的那一个gradle中。】<br><img src="/2017/07/17/android2/2.png" alt="github中找到组建的代码" title="github中找到组建的代码"><br><img src="/2017/07/17/android2/3.png" alt="androidStudio中的组建方式" title="androidStudio中的组建方式"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>同步完成之后，我们可以在我们自己的工程中使用这个菜单组件了。</p>
<h3 id="申明全局组件"><a href="#申明全局组件" class="headerlink" title="申明全局组件"></a>申明全局组件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">private ContextMenuDialogFragment contextMenuDialogFragment;</div><div class="line">private FragmentManager fragmentManager;</div></pre></td></tr></table></figure>
<h3 id="创建菜单项的组件"><a href="#创建菜单项的组件" class="headerlink" title="创建菜单项的组件"></a>创建菜单项的组件</h3><h4 id="创建MenuList"><a href="#创建MenuList" class="headerlink" title="创建MenuList"></a>创建MenuList</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;MenuObject&gt; menuObjects = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">MenuObject close = new MenuObject();</div><div class="line">close.setResource(R.drawable.icn_close);</div><div class="line"></div><div class="line">MenuObject icn1 = new MenuObject(<span class="string">"icn1"</span>);</div><div class="line">icn1.setResource(R.drawable.icn_1);</div><div class="line"></div><div class="line">MenuObject icn2 = new MenuObject(<span class="string">"icn2"</span>);</div><div class="line">icn2.setResource(R.drawable.icn_2);</div><div class="line">icn2.setBgColor(Color.parseColor(<span class="string">"#000000"</span>));</div><div class="line"></div><div class="line">MenuObject icn3 = new MenuObject(<span class="string">"icn3"</span>);</div><div class="line">icn3.setColor(Color.parseColor(<span class="string">"#0000ff"</span>));</div><div class="line"></div><div class="line">menuObjects.add(close);</div><div class="line">menuObjects.add(icn1);</div><div class="line">menuObjects.add(icn2);</div><div class="line">menuObjects.add(icn3);</div></pre></td></tr></table></figure>
<h4 id="对菜单子项进行配置"><a href="#对菜单子项进行配置" class="headerlink" title="对菜单子项进行配置"></a>对菜单子项进行配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//1	创建菜单组件</div><div class="line">MenuParams menuParams = new MenuParams();</div><div class="line">//2	将子项组件加入</div><div class="line">menuParams.setMenuObjects(menuObjects);</div><div class="line">//3	点击空白地区可以取消关闭菜单</div><div class="line">menuParams.setClosableOutside(<span class="literal">true</span>);</div><div class="line">//4	设置每个菜单子项的大小</div><div class="line">menuParams.setActionBarSize(200);</div></pre></td></tr></table></figure>
<h4 id="注"><a href="#注" class="headerlink" title="注"></a>注</h4><p>根据官方文档，我们可以通过多种方式对菜单子项进行配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">item.setResource(...)  </div><div class="line">item.setBitmap(...)  </div><div class="line">item.setDrawable(...)  </div><div class="line">item.setColor(...)</div></pre></td></tr></table></figure></p>
<h3 id="对ContextMenuDialogFragment进行实例化"><a href="#对ContextMenuDialogFragment进行实例化" class="headerlink" title="对ContextMenuDialogFragment进行实例化"></a>对ContextMenuDialogFragment进行实例化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//设置实例化</div><div class="line">contextMenuDialogFragment = ContextMenuDialogFragment.newInstance(menuParams);</div><div class="line">//打开OnClick方法</div><div class="line">contextMenuDialogFragment.setItemClickListener(this);</div><div class="line">//打开LongOnClick方法</div><div class="line">contextMenuDialogFragment.setItemLongClickListener(this);</div></pre></td></tr></table></figure>
<p>注意，在打开OnClick和LongOnClick的时候，需要添加接口。Alt+Enter即可。<br><img src="/2017/07/17/android2/4.png" alt="引用OnClick接口" title="引用OnClick接口"></p>
<h3 id="设置打开ContextMenuDialogFragment的菜单按钮"><a href="#设置打开ContextMenuDialogFragment的菜单按钮" class="headerlink" title="设置打开ContextMenuDialogFragment的菜单按钮"></a>设置打开ContextMenuDialogFragment的菜单按钮</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean onCreateOptionsMenu(final Menu menu) &#123;</div><div class="line">    MenuInflater inflater = getMenuInflater();</div><div class="line">    inflater.inflate(R.menu.menu_main, menu);</div><div class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">    switch (item.getItemId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.context_menu:</div><div class="line">            contextMenuDialogFragment.show(fragmentManager, <span class="string">"ContextMenuDialogFragment"</span>);</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> super.onOptionsItemSelected(item);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：需要再res/menu/menu_main.xml中配置一下菜单项。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;item</div><div class="line">    android:id=<span class="string">"@+id/context_menu"</span></div><div class="line">    android:title=<span class="string">"Context menu"</span></div><div class="line">    android:icon=<span class="string">"@drawable/btn_add"</span></div><div class="line">    android:orderInCategory=<span class="string">"100"</span></div><div class="line">    app:showAsAction=<span class="string">"always"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h3 id="实现onItemClick方法"><a href="#实现onItemClick方法" class="headerlink" title="实现onItemClick方法"></a>实现onItemClick方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  @Override</div><div class="line">  public void onMenuItemClick(View clickedView, int position) &#123;</div><div class="line">//根据position实现自己的方法</div><div class="line">      Log.e(<span class="string">"bili"</span>,position+<span class="string">"   OK"</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这样我们就实现最基本的Context-Menu.Android的配置使用。<br>毕竟开源的代码，我们也可以根据自己的需要，然后定制自己的功能。</p>
<p>然后奉上自己的实力代码块。<br><a href="UItest.rar">给你看个宝贝</a></p>
]]></content>
      
        <categories>
            
            <category> android学习之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> UI界面 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[复制就能用系列之Okhttp]]></title>
      <url>/2017/07/13/android1/</url>
      <content type="html"><![CDATA[<p>首先要想进行android开发的话，网络交互肯定是免不了的。之前一直用的是<a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">Android-Async-Http</a>,但后来听说因为android把HttpClient给取消掉了，于是基于HttpClient创建的android-async-http也就失去了继续留下去的必要，所以作者也已经停止了该项目的维护，Android5.0之后便不在推荐在项目中进行使用。所以也是有必要好好学习一下Okhttp了。<br>(废话很多，看来以后还是要改改啊。😅)<br><a id="more"></a>    </p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>有两种引入的方式，一个是引入Jar包，直接本地使用，第二种方式在Gradle中，直接配置。</p>
<h3 id="使用Jar包"><a href="#使用Jar包" class="headerlink" title="使用Jar包"></a>使用Jar包</h3><p>略</p>
<h3 id="Gradle中使用"><a href="#Gradle中使用" class="headerlink" title="Gradle中使用"></a>Gradle中使用</h3><p>使用androidStudio的用户可以直接使用Gradle中引入okHttp。</p>
<p>1.在okHttp的github上面,找到 compile ‘com.squareup.okhttp3:okhttp:3.8.1’ 并复制。<br><img src="/2017/07/13/android1/1.png" alt="找到使用的Gradle代码" title="找到使用的Gradle代码"><br>2.在Gradle中进行配置。将刚才复制的代码复制到如图所示的地方，然后点击同步，同步完了之后就会自动引用了。<br><img src="/2017/07/13/android1/2.png" alt="gradle中的配置" title="gradle中的配置"></p>
<h2 id="okHttp的基本使用"><a href="#okHttp的基本使用" class="headerlink" title="okHttp的基本使用"></a>okHttp的基本使用</h2><h3 id="git请求"><a href="#git请求" class="headerlink" title="git请求"></a>git请求</h3><p>一共可以分为4各部分进行来进行使用。</p>
<pre><code class="bash"><span class="comment">#1.首先建立一个OkHttpClient对象</span>
OkHttpClient okHttpClient = new OkHttpClient();
<span class="comment">#2.配置我们的request</span>
Request.Builder builder = new Request.Builder();
Request request = builder
                .get()
                .url(<span class="string">"http://192.168.1.4:8000"</span>)
                .build();
<span class="comment">#3.申明执行该任务的对象</span>
Call call = okHttpClient.newCall(request);
<span class="comment">#4.开始执行</span>
call.enqueue(new <span class="function"><span class="title">Callback</span></span>() {
            @Override
            public void onFailure(Call call, IOException e) {
                Log.e(<span class="string">"get请求失败"</span>);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                Log.e(<span class="string">"get请求成功"</span>);
                String str = response.body().string();
                Log.e(str);
            }
        });
</code></pre>
<h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><p>传递key-value对可以使用提交表单的方式</p>
<pre><code class="bash">//1.首先创建一个表单
FormBody.Builder formBuilder = new FormBody.Builder();
formBuilder.add(<span class="string">"key"</span>,<span class="string">"value"</span>);
//2.通过表单创建自己的requestBody
RequestBody requestBody = formBuilder.build();
//3.创建自己的request。将requestBody作为参数传进去，也就是我们的key-value对
Request.Builder builder = new Request.Builder();
Request request = builder
        .post(requestBody)
        .url(url)
        .build();
//4.使用call方法,执行语句
Call call = okHttpClient.newCall(request);
call.enqueue(new <span class="function"><span class="title">Callback</span></span>() {
    @Override
    public void onFailure(Call call, IOException e) {
        Log.e(TAG, <span class="string">"onFailure: "</span> );
    }
    @Override
    public void onResponse(Call call, Response response) throws IOException {
        String str = response.body().string();
        Log.e(TAG, <span class="string">"onResponse: "</span>+str.toString() );
    }
});
</code></pre>
<h3 id="upload一张图片"><a href="#upload一张图片" class="headerlink" title="upload一张图片"></a>upload一张图片</h3><p>其实也是通过post的方法实现上传，只不过是把我们的参数换成了文件，而不是key-value对</p>
<pre><code class="bash">public static void upLoadFile(String url,String filepath){
//检测传来的文件是否存在
    File file = new File(filepath);
    <span class="keyword">if</span>(!file.exists()){
        Log.e(TAG, <span class="string">"upLoadFile: 文件不存在"</span>);
        <span class="built_in">return</span>;
    }
    RequestBody requestBodyfile = RequestBody.create(MediaType.parse(<span class="string">"application/octet-stream"</span>),file);
    //构建一个文件类型的requestBody
    MultipartBody.Builder mulitiparBuilder = new MultipartBody.Builder();
    //这里也可以通过键值对的方式实现添加参数
    RequestBody requestBody = mulitiparBuilder
            .setType(MultipartBody.FORM)
            //addFormDataPart(用于服务器识别的标识，服务器接收后文件的名字，文件-requestBody)
            .addFormDataPart(<span class="string">"mPhoto"</span>, <span class="string">"photo.jpg"</span>, requestBodyfile)
            .build();

    Request.Builder builder = new Request.Builder();
    Request request = builder.url(url)
        .post(requestBody)
        .build();

    Call call =  new OkHttpClient().newCall(request);
    call.enqueue(new <span class="function"><span class="title">Callback</span></span>() {
        @Override
        public void onFailure(Call call, IOException e) {
            Log.e(TAG, <span class="string">"onFailure: 失败"</span>);
        }
        @Override
        public void onResponse(Call call, Response response) throws IOException {
            Log.e(TAG, <span class="string">"onResponse: 成功"</span> );
        }
    });
}
</code></pre>
]]></content>
      
        <categories>
            
            <category> android学习之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> okhttp </tag>
            
            <tag> 懒人专用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/07/12/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 使用hexo实现github博客搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建自己的博客]]></title>
      <url>/2017/07/12/first/</url>
      <content type="html"><![CDATA[<p>今天搭建了一个属于自己的blog，以后应该会将他一步一步的变得更加漂亮一点。。。</p>
<a id="more"></a> 
<p>今天就先写一点最基础的配置的东西。</p>
<h2 id="hexo基础配置"><a href="#hexo基础配置" class="headerlink" title="hexo基础配置"></a>hexo基础配置</h2><p><a href="https://hexo.io" target="_blank" rel="external">hexo的官网链接</a></p>
<h3 id="下载安装以及使用"><a href="#下载安装以及使用" class="headerlink" title="下载安装以及使用"></a>下载安装以及使用</h3><p>windows环境下的话，你首先的要保证自己的已经装好了node以及Git（后面配置用得着）。然后通过node的npm进行安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g	<span class="comment">#下载安装hexo，速度可能比较慢</span></div><div class="line">$ hexo init blog		<span class="comment">#选择文件存放位置安装 hexo init F:/hexo</span></div><div class="line">$ <span class="built_in">cd</span> blog			<span class="comment">#切换到创建的工程文件目录之下</span></div><div class="line">$ npm install			<span class="comment">#对新建的工程进行安装配置</span></div><div class="line">$ hexo server			<span class="comment">#开启我们新建的项目，也可以使用hexo s</span></div></pre></td></tr></table></figure>
<p>现在打开我们<a href="https://localhost:4000" target="_blank" rel="external">localhost:4000</a>，可以看到hexo的默认界面，当然我们接下来就要对其进行修改。</p>
<p><img src="https://volc1605.github.io/images/Hexo之NexT主题搭建博客详细过程/h.png" alt="hexo"></p>
<h2 id="github中创建自己的站点"><a href="#github中创建自己的站点" class="headerlink" title="github中创建自己的站点"></a>github中创建自己的站点</h2><h3 id="申请github账号"><a href="#申请github账号" class="headerlink" title="申请github账号"></a>申请github账号</h3><h3 id="创建自己的站点"><a href="#创建自己的站点" class="headerlink" title="创建自己的站点"></a>创建自己的站点</h3><p>提供一篇<a href="http://blog.csdn.net/renfufei/article/details/37725057/" target="_blank" rel="external">参考文章</a>。基本创建即可，主意保持创建的名字以及自己的用户名保持一致。</p>
<h2 id="吃水不忘挖井人"><a href="#吃水不忘挖井人" class="headerlink" title="吃水不忘挖井人"></a>吃水不忘挖井人</h2><p><a href="http://volcfamily.cn/2016/10/03/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/" target="_blank" rel="external">http://volcfamily.cn/2016/10/03/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/</a><br><a href="http://barrysite.me/2017/05/07/Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">http://barrysite.me/2017/05/07/Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</a><br><a href="http://ibruce.info/2013/11/26/markdown/" target="_blank" rel="external">http://ibruce.info/2013/11/26/markdown/</a><br><a href="https://www.zhihu.com/question/23934523" target="_blank" rel="external">https://www.zhihu.com/question/23934523</a></p>
]]></content>
      
        <categories>
            
            <category> 使用hexo实现github博客搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
