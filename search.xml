<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[android消息处理机制]]></title>
      <url>/2017/10/20/android%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="消息机制的理解"><a href="#消息机制的理解" class="headerlink" title="消息机制的理解"></a>消息机制的理解</h1><p>说到消息处理，我们首先想到的就是Hanlder，他也就是我们常说的Android异步消息处理机制。使用它，我们可以很轻易的在主线程和子线程之间进行切换。所以，也常用来更新UI。（因为UI只能在主线程里面进行更改）<br><a id="more"></a></p>
<h1 id="hanlder的常用方法"><a href="#hanlder的常用方法" class="headerlink" title="hanlder的常用方法"></a>hanlder的常用方法</h1><pre><code class="bash">Thread MyThread = new Thread(new <span class="function"><span class="title">Runnable</span></span>() {
    @Override
    public void <span class="function"><span class="title">run</span></span>() {
        //耗时间的操作
        ...
        Message msg = new Message();
        msg.what = 1;
        handler.sendMessage(msg);
    }
}).start();

public Handler handler = new <span class="function"><span class="title">Handler</span></span>(){
    @Override
    public void handleMessage(Message msg) {
        super.handleMessage(msg);
        //更新UI的操作
        ...
    }
};
</code></pre>
<p>我们可以在子线程中，进行耗时间的操作，等完成的时候，我们可以在界面中予以体现出来。<br>常用到的，也就是handler和Message，其实内部还有一些东西。下面我们就一起了解一下。</p>
<h1 id="消息机制的模型"><a href="#消息机制的模型" class="headerlink" title="消息机制的模型"></a>消息机制的模型</h1><p>消息处理的4个部分：Message，Handler，MessageQueue，Looper</p>
<h2 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h2><p>就是信息的载体。线程之间的消息传递，少量信息，用于不同的线程之间的交换数据。就是信息的载体。可以传递的信息有int(what arg1 arg2) Object (obj)</p>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>事件的发出者和处理者，是消息机制的辅助处理类。发出信息：sendMessage()   处理信息：handleMessage()</p>
<h2 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h2><p>是一个单链表的数据结构，不是队列，实行先进先出原则，主要用于存放所有通过Handler.sendemessage发送的消息。即向消息池投递消息(MessageQueue.enqueueMessage)和取走消息池的消息(MessageQueue.next)。会一直存在消息队列中，等待被处理。每个线程只有一个MessageQueue对象。</p>
<h2 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h2><p>MessageQueue的管家。不断循环(Looper.loop)，从中取出信息到handleMessage（）中，即将消息交给处理者Handler处理。</p>
<h1 id="消息处理机制结构"><a href="#消息处理机制结构" class="headerlink" title="消息处理机制结构"></a>消息处理机制结构</h1><img src="/2017/10/20/android消息处理机制/1.png" alt="消息机制运行结构图" title="消息机制运行结构图">
<p>图片来源于 <a href="https://github.com/LRH1993/android_interview/blob/master/android/basis.md&quot;" target="_blank" rel="external">Android事件分发机制</a></p>
]]></content>
      
        <categories>
            
            <category> android学习之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android四大组件之服务]]></title>
      <url>/2017/10/16/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8B%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>Android四大组件一，相当于一个看不见的Acticity，虽然多线程也是看不见的，也是在后台默默运行的，但是服务server和多线程Thread完全不一样！！！servere还是运行在主线程中，所以在service不要运行耗时的操作，会直接报错！<br><a id="more"></a></p>
<p>所以，先总结一下service的特点，然后再来挨着验证：<br>1、运行在主线程，不宜进行耗时操作；<br>2、相当于一个隐形的Activity；<br>3、运行的即使是运行的进程死掉，服务也不一定会死掉；</p>
<h1 id="接下来看一下如何使用"><a href="#接下来看一下如何使用" class="headerlink" title="接下来看一下如何使用"></a>接下来看一下如何使用</h1><h2 id="1、构建服务-service"><a href="#1、构建服务-service" class="headerlink" title="1、构建服务 service"></a>1、构建服务 service</h2><p>类似与四大组件的通用创建方式。直接新建，选择service，然后Exported表示其他App也可以访问这个服务，然后Enable表示开启这个服务，即可。AS会自动在xml中创建标签。</p>
<p>新的service要求重写onBind()函数，用户返回连接的Bind,后面会用到。</p>
<p>我们一般会手动重写一下onCreate(),onStartCommand(),onDestory()这三个函数。用于处理service需要做的事情。</p>
<h2 id="2、启动服务-service"><a href="#2、启动服务-service" class="headerlink" title="2、启动服务 service"></a>2、启动服务 service</h2><p>在Activity中，我们有两种方法启动service。<br>一种是直接启动，然后就不管了（当然也管不了），任由服务自身自灭，就算是服务完成了工作，Activity也不知道，完全互补干涩。相当于散养。<br>一种是在启动的时候，保留一个连接，通过这个连接可以随时监控service的状态，以及控制service。（圈养）</p>
<h3 id="1-散养（startService）"><a href="#1-散养（startService）" class="headerlink" title="(1)散养（startService）"></a>(1)散养（startService）</h3><p>在Activity中，使用：<br>//开启<br>Intent i = new Intent(this,MyService.class);<br>startService(i);<br>//关闭<br>Intent i = new Intent(this,MyService.class);<br>stopService(i);</p>
<p>就像启动一个最简单的Activity，但是这种方法只能单纯的启动一个service，service启动之后就会自动干活，做完没有，以及什么时候做完的，Activity都是不知道。在调用stopService就会停止该服务。但我发现这样启动service之后，就算你直接将App finish之后，service还是没有Destory。</p>
<h3 id="2-圈养（bindService）"><a href="#2-圈养（bindService）" class="headerlink" title="(2)圈养（bindService）"></a>(2)圈养（bindService）</h3><p>在Myservice中，写一个内部类，继承Binder，里面的方法自己写，暴露给Activity，用于控制service。然后申明一个MyBind的变量，在onBind函数中，将其返回出去。<br>在Activity中，深明一个ServiceConnection()，重写两个内部的方法，分别是连接成功时，和断开连接时调用，在onServiceConnection中，获取MyBinder对象。然后使用bindService(intent,ServiceConnection,…),进行绑定开启服务。这种方式可以多个Activity控制同一个Sevice，当最后一个与Service连接的Activity断开的时候，Service才会销毁。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在明白了如何开启我们的服务之后，我们再来关心一下service的生命周期，以及service与Activity的联系。</p>
<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>1.如果同时使用了startService和bindService，怎样才能停止才服务？<br>2.两个Activity同时绑定了一个Service，当在一个Activity中使用了unbingService，服务会停止吗？<br>3.怎样使一个活动（进程）已经死亡了之后，保证服务会不停止，继续运行？</p>
<p>新建工程。工程目录结构如下<br><img src="/2017/10/16/Android四大组件之服务/1.png" alt="目录结构" title="目录结构"><br>我们一共需要两个Activity和一个service。</p>
<p>service文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class MyService extends Service &#123;</div><div class="line">    private static final String TAG = <span class="string">"MyService"</span>;</div><div class="line">    private MyBinder mybinder;</div><div class="line">    public <span class="function"><span class="title">MyService</span></span>() &#123;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        <span class="built_in">return</span> mybinder;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onCreate</span></span>() &#123;</div><div class="line">        Log.e(TAG, <span class="string">"onCreate: "</span> );</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</div><div class="line">        Log.e(TAG, <span class="string">"onStartCommand: "</span> );</div><div class="line">        <span class="built_in">return</span> super.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        Log.e(TAG, <span class="string">"onDestroy: "</span> );</div><div class="line">    &#125;</div><div class="line">    class MyBinder extends Binder&#123;</div><div class="line">        public void <span class="function"><span class="title">func1</span></span>()&#123;</div><div class="line">            Log.e(TAG, <span class="string">"func1: "</span>);</div><div class="line">        &#125;</div><div class="line">        public void <span class="function"><span class="title">func2</span></span>()&#123;</div><div class="line">            Log.e(TAG, <span class="string">"func2: "</span> );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重写了onCreate，onStartCommand，onDestroy，onBind方法。新建了一个MyBinder内部类，用于绑定后，对Service的操作。</p>
<p>Activity1的布局文件以及java文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:gravity=<span class="string">"center_horizontal"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span></div><div class="line">    android:paddingBottom=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    android:paddingLeft=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    android:paddingRight=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    android:paddingTop=<span class="string">"@dimen/activity_vertical_margin"</span>&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/startService"</span></div><div class="line">        android:text=<span class="string">"startService"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/stopService"</span></div><div class="line">        android:text=<span class="string">"stopService"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/bindService"</span></div><div class="line">        android:text=<span class="string">"bindService"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/unbindService"</span></div><div class="line">        android:text=<span class="string">"unbindService"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/changeActivity"</span></div><div class="line">        android:text=<span class="string">"changeActivity"</span>/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>java:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity  &#123;</div><div class="line">    private MyService.MyBinder binder ;</div><div class="line">    private static final String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button startButton = (Button) findViewById(R.id.startService);</div><div class="line">        Button stopButton = (Button) findViewById(R.id.stopService);</div><div class="line">        Button bindButton = (Button) findViewById(R.id.bindService);</div><div class="line">        final Button unbindButton = (Button) findViewById(R.id.unbindService);</div><div class="line">        Button changeActivity = (Button) findViewById(R.id.changeActivity);</div><div class="line"></div><div class="line">        final ServiceConnection connection = new <span class="function"><span class="title">ServiceConnection</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onServiceConnected(ComponentName componentName, IBinder iBinder) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"onServiceConnected: "</span> );</div><div class="line">                binder = (MyService.MyBinder) iBinder;</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onServiceDisconnected(ComponentName componentName) &#123;</div><div class="line">                binder.func1();</div><div class="line">                binder.func2();</div><div class="line">                Log.e(TAG, <span class="string">"onServiceDisconnected: "</span> );</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        startButton.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Intent intent = new Intent(MainActivity.this,MyService.class);</div><div class="line">                startService(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        stopButton.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Intent intent = new Intent(MainActivity.this,MyService.class);</div><div class="line">                stopService(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        bindButton.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Intent intent = new Intent(MainActivity.this,MyService.class);</div><div class="line">                bindService(intent,connection, Context.BIND_AUTO_CREATE);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        unbindButton.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                unbindService(connection);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        changeActivity.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Intent intent = new Intent(MainActivity.this,MainActivity2.class);</div><div class="line">                startActivity(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        Log.e(TAG, <span class="string">"onDestroy: "</span> );</div><div class="line">        super.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Activity2的布局文件以及java文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/M2_bindService"</span></div><div class="line">        android:text=<span class="string">"M2_bindService"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/M2_unbindService"</span></div><div class="line">        android:text=<span class="string">"M2_unbindService"</span>/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>java:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class MainActivity2 extends AppCompatActivity &#123;</div><div class="line">    private static final String TAG = <span class="string">"MainActivity2"</span>;</div><div class="line">    MyService.MyBinder binder;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main2);</div><div class="line"></div><div class="line">        final Button <span class="built_in">bind</span> = (Button) findViewById(R.id.M2_bindService);</div><div class="line">        final Button unbind = (Button) findViewById(R.id.M2_unbindService);</div><div class="line"></div><div class="line">        final ServiceConnection connection = new <span class="function"><span class="title">ServiceConnection</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onServiceConnected(ComponentName componentName, IBinder iBinder) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"onServiceConnected: "</span> );</div><div class="line">                binder = (MyService.MyBinder) iBinder;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onServiceDisconnected(ComponentName componentName) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"onServiceDisconnected: "</span> );</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        bind.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Intent intent = new Intent(MainActivity2.this,MyService.class);</div><div class="line">                bindService(intent,connection,BIND_AUTO_CREATE);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        unbind.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                unbindService(connection);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/2017/10/16/Android四大组件之服务/2.png" alt="button顺序1" title="button顺序1">
<img src="/2017/10/16/Android四大组件之服务/3.png" alt="button顺序2" title="button顺序2">
<p>测试1：同时使用startService和bindService<br>点击顺序：1324和1342<br>输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">E/MyService: onCreate: </div><div class="line">E/MyService: onStartCommand: </div><div class="line">E/MyService: onDestroy:</div></pre></td></tr></table></figure></p>
<p>结论：如果同时使用startService和bindService，则需要同时使用stopService和unbindService才能结束掉服务。</p>
<p>测试2：两个Activity同时绑定了一个Service<br>点击顺序：356784<br>输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyService: onCreate: </div><div class="line">MyService: onDestroy:</div></pre></td></tr></table></figure></p>
<p>结论：当两个Activity同时绑定了一个Service时，一个断开，只要还有一个Activity还与Service相连，那么就不会Service就不会死掉。<br>有趣的是，如果我们点击顺序为：3568 和38<br>输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">E/MyService: onCreate: </div><div class="line">E/MainActivity: onDestroy: </div><div class="line">E/ActivityThread: Error....</div><div class="line">E/MyService: onDestroy:</div></pre></td></tr></table></figure></p>
<p>那么程度会报错，而且程序中，Activity的Destroy在服务的Destroy之前就已经结束了，导致了报错。</p>
<p>测试3：怎样使一个活动（进程）已经死亡了之后，保证服务会不停止<br>点击顺序：18 然后重新开启该应用， 2<br>输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">E/MyService: onCreate: </div><div class="line">E/MyService: onStartCommand: </div><div class="line">E/MainActivity: onDestroy: </div><div class="line">E/MyService: onDestroy:</div></pre></td></tr></table></figure></p>
<p>可以看到，在程序已经onDestroy了之后，服务并没有断掉，所以说，使用startService的方式启动的服务，已经与本Activity无关了。在Activity已经死掉的情况之下，还是能继续运行。</p>
]]></content>
      
        <categories>
            
            <category> android学习之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android-cardView的使用]]></title>
      <url>/2017/09/14/android-cardView/</url>
      <content type="html"><![CDATA[<p>首先，我们要知道cardView是android在5.0之后推出的一个界面组件，官方文档里面对什么时候用它，以及在什么情况之下使用他才能达到较好的效果，都有详细的介绍的哈，不过由于是英文，看起来还是有一点吃力哈。cardView本身是继承于FrameLayout，说明他其实也是一种布局文件，所以暂时可以理解为一种自带展示效果的一种FrameLayout布局文件。<br><a href="https://material.io/guidelines/components/cards.html" target="_blank" rel="external">官方原文文档</a><br><a href="https://github.com/1sters/material_design_zh" target="_blank" rel="external">中文文档</a><br><a id="more"></a></p>
<h1 id="导入库文件"><a href="#导入库文件" class="headerlink" title="导入库文件"></a>导入库文件</h1><p>在gradle中进行配置</p>
<pre><code class="bash">dependencies {
    ...
    compile <span class="string">'com.android.support:cardview-v7:26.+'</span>
}
</code></pre>
<p>其实android有很多自带的组件，而且界面效果都非常好。在我们的android sdk的文件夹之下，<br>Android\sdk\extras\android\m2repository\com\android\support<br>里面有很多的组件，没事的时候可以挨个研究一下。<br>这里我们根据的自己的版本填写自己对应的版本号就行了。</p>
<h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1><p>打开CardView的源文件我们可以很清晰的找到caraView所拥有的属性以及方法。<br>这里我就直接找了一些。<br>app:cardBackgroundColor这是设置背景颜色<br>app:cardCornerRadius这是设置圆角大小<br>app:cardElevation这是设置z轴的阴影<br>app:cardMaxElevation这是设置z轴的最大高度值<br>app:cardUseCompatPadding是否使用CompatPadding<br>app:cardPreventCornerOverlap是否使用PreventCornerOverlap<br>app:contentPadding 设置内容的padding<br>app:contentPaddingLeft 设置内容的左padding<br>app:contentPaddingTop 设置内容的上padding<br>app:contentPaddingRight 设置内容的右padding<br>app:contentPaddingBottom 设置内容的底padding</p>
<p>最简单的基础版</p>
<pre><code class="bash">&lt;android.support.v7.widget.CardView
    android:layout_margin=<span class="string">"20dp"</span>
    android:layout_width=<span class="string">"match_parent"</span>
    android:layout_height=<span class="string">"200dp"</span>&gt;
&lt;/android.support.v7.widget.CardView&gt;
</code></pre>
<p>只是引用，什么都没加，效果就很low，就是一个有边框的FrameLayout的样子。<br><img src="/2017/09/14/android-cardView/one.png" alt="cardView基础版" title="cardView基础版"><br>让我们稍作调整，让他好看一点。</p>
<p>成熟期版</p>
<pre><code class="bash">&lt;android.support.v7.widget.CardView
    android:layout_margin=<span class="string">"20dp"</span>            
    android:layout_width=<span class="string">"match_parent"</span>
    android:layout_height=<span class="string">"300dp"</span>

    app:cardCornerRadius=<span class="string">"20dp"</span>                //加上圆角
    app:cardElevation=<span class="string">"10dp"</span>                //加上阴影
    app:cardBackgroundColor=<span class="string">"#dcdcdc"</span>        //加上背景颜色
    &gt;
    &lt;ImageView
        android:layout_width=<span class="string">"match_parent"</span>
        android:layout_height=<span class="string">"wrap_content"</span>
        android:scaleType=<span class="string">"center"</span>
        android:src=<span class="string">"@drawable/pic"</span>
        tools:ignore=<span class="string">"ContentDescription"</span> /&gt;        
&lt;/android.support.v7.widget.CardView&gt;
</code></pre>
<p>这一次我们新增加了一些属性，让其变得更像卡片一些。<br><img src="/2017/09/14/android-cardView/two.png" alt="cardView成熟期" title="cardView成熟期"><br>有没有觉得现在看起来要好看一些了呢！</p>
<p>最后我们仿照着官方文档中的那个图片做一个类似的。<br><img src="/2017/09/14/android-cardView/three.png" alt="cardView官方图片" title="cardView官方图片"><br><img src="/2017/09/14/android-cardView/four.png" alt="cardView仿照制作" title="cardView仿照制作"></p>
<p>看起来效果还不错是吧。</p>
<p>源文件已经上传，有兴趣的朋友可以看一下。<br><a href="https://github.com/JokerHerry/donghua" target="_blank" rel="external">链接在此</a></p>
]]></content>
      
        <categories>
            
            <category> android学习之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> materialDesign </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java基本理解，以及常用小技巧]]></title>
      <url>/2017/07/31/java1/</url>
      <content type="html"><![CDATA[<h1 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a>基本理解</h1><h2 id="jdk与jre的关系"><a href="#jdk与jre的关系" class="headerlink" title="jdk与jre的关系"></a>jdk与jre的关系</h2><a id="more"></a>
<p>因为每次在官网上下载的jdk的安装包的时候，安装时就会发现，我们不仅安装我们所需要的jdk，而且我们还安装了一个jre，于是不禁有点好奇。经过网上查阅，总结了一下：</p>
<p>jre(java runtime environment)  java运行环境<br>jdk(Java Development Kit)  java开发者工具<br>jvm(Java Virtual Machine)  java虚拟机<br><img src="/2017/07/31/java1/1.jpg" alt="层次结构" title="层次结构"></p>
<h3 id="理清关系"><a href="#理清关系" class="headerlink" title="理清关系"></a>理清关系</h3><p>我们现在一般下载的jkd中都已经包含了jre，所以一般在安装jdk的时候会自动提醒安装jre。<br>jre与jdk是相互独立的两个东西。<br>JRE（java运行时环境）包含JVM的java程序的运行环境。<br>因为java需要首先将java程序编译成为javac的中间件，但是机器并不认识这种编译，只有通过jvm处理，同时也保证了跨平台编译，而现在jvm一般也都集成在了jre之中。</p>
<h3 id="JDK（Java-Development-Kit）"><a href="#JDK（Java-Development-Kit）" class="headerlink" title="JDK（Java Development Kit）"></a>JDK（Java Development Kit）</h3><p>JDK是Java开发工具包，是Sun Microsystems针对Java开发员的产品。<br>JDK中包含JRE，在JDK的安装目录下有一个名为jre的目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。<br>JDK是整个JAVA的核心，包括了Java运行环境JRE（Java Runtime Envirnment）、一堆Java工具（javac/java/jdb等）和Java基础的类库（即Java API 包括rt.jar）。</p>
<h3 id="Java-Runtime-Environment（JRE）"><a href="#Java-Runtime-Environment（JRE）" class="headerlink" title="Java Runtime Environment（JRE）"></a>Java Runtime Environment（JRE）</h3><p>是运行基于Java语言编写的程序所不可缺少的运行环境。也是通过它，Java的开发者才得以将自己开发的程序发布到用户手中，让用户使用。<br>JRE中包含了Java virtual machine（JVM），runtime class libraries和Java application launcher，这些是运行Java程序的必要组件。<br>与大家熟知的JDK不同，JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器），只是针对于使用Java程序的用户。</p>
<h3 id="JVM（java-virtual-machine）"><a href="#JVM（java-virtual-machine）" class="headerlink" title="JVM（java virtual machine）"></a>JVM（java virtual machine）</h3><p>就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行。<br>也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。<br>只有JVM还不能成class的执行，因为在解释class的时候JVM需要调用解释所需要的类库lib，而jre包含lib类库。<br>JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p>
<h1 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h1><h2 id="查看自己的java是32位的，还是64位"><a href="#查看自己的java是32位的，还是64位" class="headerlink" title="查看自己的java是32位的，还是64位"></a>查看自己的java是32位的，还是64位</h2><p>方法一：</p>
<pre><code class="bash">在cmd使用指令：        java -version
</code></pre>
<p>可以看到自己的java版本，如果是64位的话，会直接在最下方显示64Bit，32位的话就不会显示，我的就是32位的。<br><img src="/2017/07/31/java1/2.png" alt="2.png" title=""></p>
<p>方法二：使用定向指令</p>
<pre><code class="bash">在cmd使用指令：        java d32-version
在cmd使用指令：        java d64-version
</code></pre>
<p>这样就可以看到自己的装的32位java与64位java分别各是多少版本。<br><img src="/2017/07/31/java1/3.png" alt="3.png" title=""></p>
]]></content>
      
        <categories>
            
            <category> java理解 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[github项目学习：Context-Menu.Android]]></title>
      <url>/2017/07/17/android2/</url>
      <content type="html"><![CDATA[<p>看图看效果，Context-Menu.Android在github上是一个比较火的项目，而且实现效果也也比较简单，仅需几部就可以实现一个优雅的动态菜单。这一部分讲解一下怎么在androidStudio怎么实现。<br><img src="/2017/07/17/android2/1.gif" alt="Context-Menu.Android效果展示" title="Context-Menu.Android效果展示"><br><a id="more"></a></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>先奉上github的链接。<a href="https://github.com/Yalantis/Context-Menu.Android" target="_blank" rel="external">戳戳戳</a></p>
<p>复制组件的代码到自己项目的gradle中，然后点击同步。【注意。是自己的app的gradle中，不是工程名的那一个gradle中。】<br><img src="/2017/07/17/android2/2.png" alt="github中找到组建的代码" title="github中找到组建的代码"><br><img src="/2017/07/17/android2/3.png" alt="androidStudio中的组建方式" title="androidStudio中的组建方式"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>同步完成之后，我们可以在我们自己的工程中使用这个菜单组件了。</p>
<h3 id="申明全局组件"><a href="#申明全局组件" class="headerlink" title="申明全局组件"></a>申明全局组件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">private ContextMenuDialogFragment contextMenuDialogFragment;</div><div class="line">private FragmentManager fragmentManager;</div></pre></td></tr></table></figure>
<h3 id="创建菜单项的组件"><a href="#创建菜单项的组件" class="headerlink" title="创建菜单项的组件"></a>创建菜单项的组件</h3><h4 id="创建MenuList"><a href="#创建MenuList" class="headerlink" title="创建MenuList"></a>创建MenuList</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;MenuObject&gt; menuObjects = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">MenuObject close = new MenuObject();</div><div class="line">close.setResource(R.drawable.icn_close);</div><div class="line"></div><div class="line">MenuObject icn1 = new MenuObject(<span class="string">"icn1"</span>);</div><div class="line">icn1.setResource(R.drawable.icn_1);</div><div class="line"></div><div class="line">MenuObject icn2 = new MenuObject(<span class="string">"icn2"</span>);</div><div class="line">icn2.setResource(R.drawable.icn_2);</div><div class="line">icn2.setBgColor(Color.parseColor(<span class="string">"#000000"</span>));</div><div class="line"></div><div class="line">MenuObject icn3 = new MenuObject(<span class="string">"icn3"</span>);</div><div class="line">icn3.setColor(Color.parseColor(<span class="string">"#0000ff"</span>));</div><div class="line"></div><div class="line">menuObjects.add(close);</div><div class="line">menuObjects.add(icn1);</div><div class="line">menuObjects.add(icn2);</div><div class="line">menuObjects.add(icn3);</div></pre></td></tr></table></figure>
<h4 id="对菜单子项进行配置"><a href="#对菜单子项进行配置" class="headerlink" title="对菜单子项进行配置"></a>对菜单子项进行配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//1	创建菜单组件</div><div class="line">MenuParams menuParams = new MenuParams();</div><div class="line">//2	将子项组件加入</div><div class="line">menuParams.setMenuObjects(menuObjects);</div><div class="line">//3	点击空白地区可以取消关闭菜单</div><div class="line">menuParams.setClosableOutside(<span class="literal">true</span>);</div><div class="line">//4	设置每个菜单子项的大小</div><div class="line">menuParams.setActionBarSize(200);</div></pre></td></tr></table></figure>
<h4 id="注"><a href="#注" class="headerlink" title="注"></a>注</h4><p>根据官方文档，我们可以通过多种方式对菜单子项进行配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">item.setResource(...)  </div><div class="line">item.setBitmap(...)  </div><div class="line">item.setDrawable(...)  </div><div class="line">item.setColor(...)</div></pre></td></tr></table></figure></p>
<h3 id="对ContextMenuDialogFragment进行实例化"><a href="#对ContextMenuDialogFragment进行实例化" class="headerlink" title="对ContextMenuDialogFragment进行实例化"></a>对ContextMenuDialogFragment进行实例化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//设置实例化</div><div class="line">contextMenuDialogFragment = ContextMenuDialogFragment.newInstance(menuParams);</div><div class="line">//打开OnClick方法</div><div class="line">contextMenuDialogFragment.setItemClickListener(this);</div><div class="line">//打开LongOnClick方法</div><div class="line">contextMenuDialogFragment.setItemLongClickListener(this);</div></pre></td></tr></table></figure>
<p>注意，在打开OnClick和LongOnClick的时候，需要添加接口。Alt+Enter即可。<br><img src="/2017/07/17/android2/4.png" alt="引用OnClick接口" title="引用OnClick接口"></p>
<h3 id="设置打开ContextMenuDialogFragment的菜单按钮"><a href="#设置打开ContextMenuDialogFragment的菜单按钮" class="headerlink" title="设置打开ContextMenuDialogFragment的菜单按钮"></a>设置打开ContextMenuDialogFragment的菜单按钮</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean onCreateOptionsMenu(final Menu menu) &#123;</div><div class="line">    MenuInflater inflater = getMenuInflater();</div><div class="line">    inflater.inflate(R.menu.menu_main, menu);</div><div class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">    switch (item.getItemId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.context_menu:</div><div class="line">            contextMenuDialogFragment.show(fragmentManager, <span class="string">"ContextMenuDialogFragment"</span>);</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> super.onOptionsItemSelected(item);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：需要再res/menu/menu_main.xml中配置一下菜单项。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;item</div><div class="line">    android:id=<span class="string">"@+id/context_menu"</span></div><div class="line">    android:title=<span class="string">"Context menu"</span></div><div class="line">    android:icon=<span class="string">"@drawable/btn_add"</span></div><div class="line">    android:orderInCategory=<span class="string">"100"</span></div><div class="line">    app:showAsAction=<span class="string">"always"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h3 id="实现onItemClick方法"><a href="#实现onItemClick方法" class="headerlink" title="实现onItemClick方法"></a>实现onItemClick方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  @Override</div><div class="line">  public void onMenuItemClick(View clickedView, int position) &#123;</div><div class="line">//根据position实现自己的方法</div><div class="line">      Log.e(<span class="string">"bili"</span>,position+<span class="string">"   OK"</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这样我们就实现最基本的Context-Menu.Android的配置使用。<br>毕竟开源的代码，我们也可以根据自己的需要，然后定制自己的功能。</p>
<p>然后奉上自己的实力代码块。<br><a href="UItest.rar">给你看个宝贝</a></p>
]]></content>
      
        <categories>
            
            <category> android学习之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> UI界面 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[复制就能用系列之Okhttp]]></title>
      <url>/2017/07/13/android1/</url>
      <content type="html"><![CDATA[<p>首先要想进行android开发的话，网络交互肯定是免不了的。之前一直用的是<a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">Android-Async-Http</a>,但后来听说因为android把HttpClient给取消掉了，于是基于HttpClient创建的android-async-http也就失去了继续留下去的必要，所以作者也已经停止了该项目的维护，Android5.0之后便不在推荐在项目中进行使用。所以也是有必要好好学习一下Okhttp了。<br>(废话很多，看来以后还是要改改啊。😅)<br><a id="more"></a>    </p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>有两种引入的方式，一个是引入Jar包，直接本地使用，第二种方式在Gradle中，直接配置。</p>
<h3 id="使用Jar包"><a href="#使用Jar包" class="headerlink" title="使用Jar包"></a>使用Jar包</h3><p>略</p>
<h3 id="Gradle中使用"><a href="#Gradle中使用" class="headerlink" title="Gradle中使用"></a>Gradle中使用</h3><p>使用androidStudio的用户可以直接使用Gradle中引入okHttp。</p>
<p>1.在okHttp的github上面,找到 compile ‘com.squareup.okhttp3:okhttp:3.8.1’ 并复制。<br><img src="/2017/07/13/android1/1.png" alt="找到使用的Gradle代码" title="找到使用的Gradle代码"><br>2.在Gradle中进行配置。将刚才复制的代码复制到如图所示的地方，然后点击同步，同步完了之后就会自动引用了。<br><img src="/2017/07/13/android1/2.png" alt="gradle中的配置" title="gradle中的配置"></p>
<h2 id="okHttp的基本使用"><a href="#okHttp的基本使用" class="headerlink" title="okHttp的基本使用"></a>okHttp的基本使用</h2><h3 id="git请求"><a href="#git请求" class="headerlink" title="git请求"></a>git请求</h3><p>一共可以分为4各部分进行来进行使用。</p>
<pre><code class="bash"><span class="comment">#1.首先建立一个OkHttpClient对象</span>
OkHttpClient okHttpClient = new OkHttpClient();
<span class="comment">#2.配置我们的request</span>
Request.Builder builder = new Request.Builder();
Request request = builder
                .get()
                .url(<span class="string">"http://192.168.1.4:8000"</span>)
                .build();
<span class="comment">#3.申明执行该任务的对象</span>
Call call = okHttpClient.newCall(request);
<span class="comment">#4.开始执行</span>
call.enqueue(new <span class="function"><span class="title">Callback</span></span>() {
            @Override
            public void onFailure(Call call, IOException e) {
                Log.e(<span class="string">"get请求失败"</span>);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                Log.e(<span class="string">"get请求成功"</span>);
                String str = response.body().string();
                Log.e(str);
            }
        });
</code></pre>
<h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><p>传递key-value对可以使用提交表单的方式</p>
<pre><code class="bash">//1.首先创建一个表单
FormBody.Builder formBuilder = new FormBody.Builder();
formBuilder.add(<span class="string">"key"</span>,<span class="string">"value"</span>);
//2.通过表单创建自己的requestBody
RequestBody requestBody = formBuilder.build();
//3.创建自己的request。将requestBody作为参数传进去，也就是我们的key-value对
Request.Builder builder = new Request.Builder();
Request request = builder
        .post(requestBody)
        .url(url)
        .build();
//4.使用call方法,执行语句
Call call = okHttpClient.newCall(request);
call.enqueue(new <span class="function"><span class="title">Callback</span></span>() {
    @Override
    public void onFailure(Call call, IOException e) {
        Log.e(TAG, <span class="string">"onFailure: "</span> );
    }
    @Override
    public void onResponse(Call call, Response response) throws IOException {
        String str = response.body().string();
        Log.e(TAG, <span class="string">"onResponse: "</span>+str.toString() );
    }
});
</code></pre>
<h3 id="upload一张图片"><a href="#upload一张图片" class="headerlink" title="upload一张图片"></a>upload一张图片</h3><p>其实也是通过post的方法实现上传，只不过是把我们的参数换成了文件，而不是key-value对</p>
<pre><code class="bash">public static void upLoadFile(String url,String filepath){
//检测传来的文件是否存在
    File file = new File(filepath);
    <span class="keyword">if</span>(!file.exists()){
        Log.e(TAG, <span class="string">"upLoadFile: 文件不存在"</span>);
        <span class="built_in">return</span>;
    }
    RequestBody requestBodyfile = RequestBody.create(MediaType.parse(<span class="string">"application/octet-stream"</span>),file);
    //构建一个文件类型的requestBody
    MultipartBody.Builder mulitiparBuilder = new MultipartBody.Builder();
    //这里也可以通过键值对的方式实现添加参数
    RequestBody requestBody = mulitiparBuilder
            .setType(MultipartBody.FORM)
            //addFormDataPart(用于服务器识别的标识，服务器接收后文件的名字，文件-requestBody)
            .addFormDataPart(<span class="string">"mPhoto"</span>, <span class="string">"photo.jpg"</span>, requestBodyfile)
            .build();

    Request.Builder builder = new Request.Builder();
    Request request = builder.url(url)
        .post(requestBody)
        .build();

    Call call =  new OkHttpClient().newCall(request);
    call.enqueue(new <span class="function"><span class="title">Callback</span></span>() {
        @Override
        public void onFailure(Call call, IOException e) {
            Log.e(TAG, <span class="string">"onFailure: 失败"</span>);
        }
        @Override
        public void onResponse(Call call, Response response) throws IOException {
            Log.e(TAG, <span class="string">"onResponse: 成功"</span> );
        }
    });
}
</code></pre>
]]></content>
      
        <categories>
            
            <category> android学习之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> okhttp </tag>
            
            <tag> 懒人专用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建自己的博客]]></title>
      <url>/2017/07/12/first/</url>
      <content type="html"><![CDATA[<p>今天搭建了一个属于自己的blog，以后应该会将他一步一步的变得更加漂亮一点。。。</p>
<a id="more"></a> 
<p>今天就先写一点最基础的配置的东西。</p>
<h2 id="hexo基础配置"><a href="#hexo基础配置" class="headerlink" title="hexo基础配置"></a>hexo基础配置</h2><p><a href="https://hexo.io" target="_blank" rel="external">hexo的官网链接</a></p>
<h3 id="下载安装以及使用"><a href="#下载安装以及使用" class="headerlink" title="下载安装以及使用"></a>下载安装以及使用</h3><p>windows环境下的话，你首先的要保证自己的已经装好了node以及Git（后面配置用得着）。然后通过node的npm进行安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g	<span class="comment">#下载安装hexo，速度可能比较慢</span></div><div class="line">$ hexo init blog		<span class="comment">#选择文件存放位置安装 hexo init F:/hexo</span></div><div class="line">$ <span class="built_in">cd</span> blog			<span class="comment">#切换到创建的工程文件目录之下</span></div><div class="line">$ npm install			<span class="comment">#对新建的工程进行安装配置</span></div><div class="line">$ hexo server			<span class="comment">#开启我们新建的项目，也可以使用hexo s</span></div></pre></td></tr></table></figure>
<p>现在打开我们<a href="https://localhost:4000" target="_blank" rel="external">localhost:4000</a>，可以看到hexo的默认界面，当然我们接下来就要对其进行修改。</p>
<p><img src="https://volc1605.github.io/images/Hexo之NexT主题搭建博客详细过程/h.png" alt="hexo"></p>
<h2 id="github中创建自己的站点"><a href="#github中创建自己的站点" class="headerlink" title="github中创建自己的站点"></a>github中创建自己的站点</h2><h3 id="申请github账号"><a href="#申请github账号" class="headerlink" title="申请github账号"></a>申请github账号</h3><h3 id="创建自己的站点"><a href="#创建自己的站点" class="headerlink" title="创建自己的站点"></a>创建自己的站点</h3><p>提供一篇<a href="http://blog.csdn.net/renfufei/article/details/37725057/" target="_blank" rel="external">参考文章</a>。基本创建即可，主意保持创建的名字以及自己的用户名保持一致。</p>
<h2 id="吃水不忘挖井人"><a href="#吃水不忘挖井人" class="headerlink" title="吃水不忘挖井人"></a>吃水不忘挖井人</h2><p><a href="http://volcfamily.cn/2016/10/03/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/" target="_blank" rel="external">http://volcfamily.cn/2016/10/03/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/</a><br><a href="http://barrysite.me/2017/05/07/Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">http://barrysite.me/2017/05/07/Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</a><br><a href="http://ibruce.info/2013/11/26/markdown/" target="_blank" rel="external">http://ibruce.info/2013/11/26/markdown/</a><br><a href="https://www.zhihu.com/question/23934523" target="_blank" rel="external">https://www.zhihu.com/question/23934523</a></p>
]]></content>
      
        <categories>
            
            <category> 使用hexo实现github博客搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/07/12/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 使用hexo实现github博客搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
